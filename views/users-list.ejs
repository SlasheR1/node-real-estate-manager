
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/tables.css">
    <!-- Font Awesome для иконок и спиннера -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        :root {
            --primary-color: #0d6efd;
            --primary-dark: #0b5ed7;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --border-radius: 8px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --transition-speed: 0.3s;
        }

        body {
            background-color: #f9fafb;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Улучшенные стили заголовка */
        h1 {
            position: relative;
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 30px;
            display: inline-block;
        }

        h1::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 60%;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), transparent);
            border-radius: 2px;
            transition: width 0.4s ease;
        }

        h1:hover::after {
            width: 100%;
        }

        /* Модернизированные стили таблицы */
        .data-table {
            width: 100%;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            border-collapse: separate;
            border-spacing: 0;
            overflow: hidden;
            margin-bottom: 30px;
        }

        .data-table thead th {
            background-color: #f1f5f9;
            font-weight: 600;
            padding: 16px 12px;
            text-align: left;
            color: var(--dark-color);
            border-bottom: 2px solid #e5e7eb;
            position: relative;
        }

        .data-table thead th::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 2px;
            background-color: var(--primary-color);
            transition: width 0.3s ease;
        }

        .data-table thead th:hover::after {
            width: 100%;
        }

        .data-table tbody tr {
            transition: all var(--transition-speed) ease;
            border-bottom: 1px solid #f0f0f0;
        }

        .data-table tbody tr:last-child {
            border-bottom: none;
        }

        .data-table tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.04);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }

        .data-table tbody td {
            padding: 16px 12px;
            vertical-align: middle;
        }

        /* Улучшенные стили для аватаров */
        .user-avatar-small {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            vertical-align: middle;
            margin-right: 10px;
            border: 2px solid #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            transition: all var(--transition-speed) ease;
        }

        .user-avatar-small:hover {
            transform: scale(1.15);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        /* Улучшенные стили для кнопок */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            font-weight: 500;
            transition: all var(--transition-speed) ease;
            border: none;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.5s, height 0.5s;
            z-index: 1;
        }

        .btn:hover::before {
            width: 300%;
            height: 300%;
        }

        .btn:active {
            transform: translateY(1px);
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-secondary {
            background-color: var(--secondary-color);
            color: white;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

        .btn-warning {
            background-color: var(--warning-color);
            color: #212529;
        }

        .btn-warning:hover {
            background-color: #e0a800;
        }

        .btn-delete {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-delete:hover {
            background-color: #c82333;
        }

        .btn-edit {
            background-color: var(--info-color);
            color: white;
        }

        .btn-edit:hover {
            background-color: #138496;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.875rem;
        }

        .btn .button-text {
            position: relative;
            z-index: 2;
        }

        .btn:disabled {
            opacity: 0.65;
            cursor: not-allowed;
            box-shadow: none;
        }

        .btn:disabled::before {
            display: none;
        }

        /* Стили для действий в таблице */
        .actions-cell {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .actions-cell form {
            margin: 0;
        }

        /* Модернизированные стили модального окна */
        #adjustBalanceModal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(3px);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        #adjustBalanceModal.visible {
            opacity: 1;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 8% auto;
            padding: 25px;
            border: 1px solid #ddd;
            width: 90%;
            max-width: 450px;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            transform: translateY(-30px);
            opacity: 0;
            transition: all 0.4s ease;
            position: relative;
        }

        #adjustBalanceModal.visible .modal-content {
            transform: translateY(0);
            opacity: 1;
        }

        .close-modal {
            position: absolute;
            top: 15px;
            right: 20px;
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
            transition: all 0.2s ease;
        }

        .close-modal:hover, .close-modal:focus {
            color: var(--dark-color);
            transform: rotate(90deg);
        }

        .modal-content h2 {
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--dark-color);
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }

        .modal-content p {
            margin-bottom: 15px;
            font-size: 1rem;
        }

        .modal-content .form-group {
            margin-bottom: 20px;
        }

        .modal-content .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark-color);
        }

        .modal-content .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-size: 1rem;
            line-height: 1.5;
            box-sizing: border-box;
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

        .modal-content .form-control:focus {
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

        .modal-content .btn-primary {
            margin-top: 5px;
            margin-right: 10px;
        }

        /* Улучшенные стили для JS сообщений */
        #js-messages-user-list {
            margin-bottom: 20px;
        }

        #js-messages-user-list .flash-message {
            padding: 16px 20px;
            margin-bottom: 20px;
            border-radius: var(--border-radius);
            border-left: 4px solid transparent;
            position: relative;
            font-size: 0.95rem;
            box-shadow: var(--box-shadow);
            animation: slideInDown 0.4s forwards;
            opacity: 0;
            transform: translateY(-20px);
        }

        @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #js-messages-user-list .flash-success {
            color: #0f5132;
            background-color: #d1e7dd;
            border-left-color: #20c997;
        }

        #js-messages-user-list .flash-error {
            color: #842029;
            background-color: #f8d7da;
            border-left-color: #dc3545;
        }

        #js-messages-user-list .flash-info {
            color: #055160;
            background-color: #cff4fc;
            border-left-color: #0dcaf0;
        }

        #js-messages-user-list .flash-message .close-flash {
            position: absolute;
            top: 50%;
            right: 15px;
            transform: translateY(-50%);
            background: none;
            border: none;
            font-size: 1.5rem;
            line-height: 1;
            color: inherit;
            opacity: 0.6;
            cursor: pointer;
            padding: 0 5px;
            transition: all 0.2s ease;
        }

        #js-messages-user-list .flash-message .close-flash:hover {
            opacity: 1;
            transform: translateY(-50%) rotate(90deg);
        }

        /* Улучшенные стили пагинации */
        .pagination-container {
            margin-top: 25px;
            margin-bottom: 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
            padding: 12px 15px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .pagination-controls button {
            padding: 8px 14px;
            font-size: 0.95rem;
            border: none;
            background-color: #fff;
            color: var(--primary-color);
            cursor: pointer;
            border-radius: var(--border-radius);
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
            min-width: 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .pagination-controls button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background-color: rgba(13, 110, 253, 0.1);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.4s, height 0.4s;
        }

        .pagination-controls button:hover:not(:disabled)::before {
            width: 200%;
            height: 200%;
        }

        .pagination-controls button:hover:not(:disabled) {
            background-color: #f8f9fa;
            color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .pagination-controls button:disabled {
            color: #adb5bd;
            background-color: #f8f9fa;
            cursor: not-allowed;
            opacity: 0.7;
            box-shadow: none;
        }

        .pagination-controls button.active {
            background-color: var(--primary-color);
            color: #fff;
            cursor: default;
            font-weight: 500;
            box-shadow: 0 2px 5px rgba(13, 110, 253, 0.3);
        }

        .pagination-info {
            font-size: 0.95rem;
            color: var(--secondary-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .pagination-info select {
            padding: 6px 10px;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-size: 0.9rem;
            vertical-align: middle;
            transition: all 0.2s ease;
            cursor: pointer;
            background-color: white;
        }

        .pagination-info select:focus {
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);
        }

        .pagination-info label {
            margin-bottom: 0;
        }

        /* Эффект для скрытых строк */
        .hidden-row {
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        /* Спиннер с улучшенным стилем */
        .button-spinner {
            margin-left: 5px;
            display: none;
            font-size: 0.9em;
            color: inherit;
        }

        button:disabled .button-spinner {
            display: inline-block;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Стили для временного пароля */
        #js-messages-user-list strong[id^="temp-pass-"] {
            background-color: #f0f0f0;
            padding: 6px 10px;
            border-radius: 4px;
            margin: 0 5px;
            user-select: all;
            font-family: monospace;
            font-size: 1.05em;
            position: relative;
            display: inline-block;
            box-shadow: inset 0 0 3px rgba(0,0,0,0.1);
            animation: highlight 2s ease-in-out;
        }

        @keyframes highlight {
            0%, 100% { background-color: #f0f0f0; }
            50% { background-color: #ffe066; }
        }

        /* Анимации для кнопок копирования */
        button.copied {
            animation: pulse 1s;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* Анимация для строк таблицы при загрузке страницы */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #usersTableBody tr {
            opacity: 0;
            animation: fadeInUp 0.5s forwards;
        }

        #usersTableBody tr:nth-child(1) { animation-delay: 0.05s; }
        #usersTableBody tr:nth-child(2) { animation-delay: 0.1s; }
        #usersTableBody tr:nth-child(3) { animation-delay: 0.15s; }
        #usersTableBody tr:nth-child(4) { animation-delay: 0.2s; }
        #usersTableBody tr:nth-child(5) { animation-delay: 0.25s; }
        #usersTableBody tr:nth-child(6) { animation-delay: 0.3s; }
        #usersTableBody tr:nth-child(7) { animation-delay: 0.35s; }
        #usersTableBody tr:nth-child(8) { animation-delay: 0.4s; }
        #usersTableBody tr:nth-child(9) { animation-delay: 0.45s; }
        #usersTableBody tr:nth-child(10) { animation-delay: 0.5s; }

        /* Красивая анимация кнопки добавления пользователя */
        .page-actions {
            margin: 30px 0;
        }

        .btn-primary.add-user {
            padding: 10px 20px;
            font-size: 1rem;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .btn-primary.add-user::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }

        .btn-primary.add-user:hover::after {
            left: 100%;
        }

        .btn-primary.add-user i {
            font-size: 0.9rem;
            transition: transform 0.3s ease;
            transform-origin: center;
        }

        .btn-primary.add-user:hover i {
            transform: rotate(90deg);
        }

        /* Эффект для баланса */
        .balance-value {
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .balance-value.updated {
            animation: balanceUpdate 1s ease;
        }

        @keyframes balanceUpdate {
            0%, 100% { color: inherit; }
            50% { color: #28a745; font-weight: bold; }
        }

        /* Тултипы для кнопок */
        [data-tooltip] {
            position: relative;
        }

        [data-tooltip]::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            padding: 6px 10px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            font-size: 0.8rem;
            border-radius: 4px;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            pointer-events: none;
            z-index: 10;
        }

        [data-tooltip]::before {
            content: '';
            position: absolute;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%) translateY(100%);
            border-width: 5px;
            border-style: solid;
            border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            pointer-events: none;
            z-index: 10;
        }

        [data-tooltip]:hover::after,
        [data-tooltip]:hover::before {
            opacity: 1;
            visibility: visible;
            bottom: 135%;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>

    <main class="container">
        <h1><%= title %></h1>

        <div class="page-actions">
            <a href="/users/add" class="btn btn-primary add-user">
                <i class="fas fa-plus"></i>
                <span>Добавить пользователя</span>
            </a>
        </div>

        <%- include('partials/messages') %>
        <div id="js-messages-user-list"></div>

        <div class="table-responsive">
            <table class="data-table" id="usersTable">
                <thead>
                    <tr>
                        <th></th>
                        <th>Логин</th>
                        <th>ФИО</th>
                        <th>Роль</th>
                        <th>Баланс</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <% if (users && users.length > 0) { %>
                        <% users.forEach(user => { %>
                            <tr id="user-row-<%= user.Username %>">
                                <td><img src="<%= user.DisplayAvatarSrc %>" alt="avatar" class="user-avatar-small"></td>
                                <td><%= user.Username %></td>
                                <td><%= user.FullName %></td>
                                <td><%= user.Role %></td>
                                <td>
                                    <span class="balance-value">
                                        <%= new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(user.Balance || 0) %>
                                    </span>
                                </td>
                                <td class="actions-cell">
                                    <button
                                        class="btn btn-small btn-secondary"
                                        onclick="openAdjustBalanceModal('<%= user.Username %>', '<%= user.Balance || 0 %>')"
                                        <%= user.Role !== 'Tenant' ? 'disabled title="Баланс есть только у арендаторов"' : '' %>
                                        data-tooltip="Изменить баланс">
                                        <i class="fas fa-wallet"></i>
                                    </button>
                                    <a href="/users/edit/<%= user.Username %>" class="btn btn-small btn-edit" data-tooltip="Редактировать">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <% if (currentUser.username !== user.Username) { %>
                                        <button type="button" class="btn btn-small btn-warning set-temp-password-btn" data-username="<%= user.Username %>" data-tooltip="Сбросить пароль">
                                            <span class="button-text"><i class="fas fa-key"></i></span>
                                            <i class="fas fa-spinner fa-spin button-spinner"></i>
                                        </button>
                                        <form class="delete-user-form" data-username="<%= user.Username %>" action="/users/delete/<%= user.Username %>" method="POST">
                                            <button type="submit" class="btn btn-small btn-delete" data-tooltip="Удалить пользователя">
                                                <span class="button-text"><i class="fas fa-trash-alt"></i></span>
                                                <i class="fas fa-spinner fa-spin button-spinner"></i>
                                            </button>
                                        </form>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" style="text-align: center; padding: 30px;">
                                <i class="fas fa-users-slash" style="font-size: 3rem; color: #ddd; margin-bottom: 15px;"></i>
                                <p style="margin: 0;">Пользователи не найдены.</p>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <div class="pagination-container" id="paginationContainer">
            <div class="pagination-info">
                <span id="paginationInfo"></span>
                <select id="itemsPerPageSelect">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
                <label for="itemsPerPageSelect" style="margin-left: 5px;">на странице</label>
            </div>
            <div class="pagination-controls" id="paginationControls">
                <%# Кнопки будут генерироваться JS %>
            </div>
        </div>
    </main>

    <div id="adjustBalanceModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeAdjustBalanceModal()">×</span>
            <h2>Изменить баланс для <span id="modalUsername"></span></h2>
            <p>Текущий баланс: <strong id="modalCurrentBalance"></strong></p>
            <form id="adjustBalanceForm">
                <input type="hidden" id="modalUsernameInput" name="username">
                <div class="form-group">
                    <label for="newBalanceInput">Новый баланс:</label>
                    <input type="number" step="0.01" id="newBalanceInput" name="newBalance" required class="form-control">
                </div>
                <p id="modalError" style="color: #dc3545; display: none; font-size: 0.9rem; margin-top: 5px;"></p>
                <button type="submit" id="adjustBalanceSubmitBtn" class="btn btn-primary">
                    <span class="button-text">Применить</span>
                    <i class="fas fa-spinner fa-spin button-spinner"></i>
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeAdjustBalanceModal()">Отмена</button>
            </form>
        </div>
    </div>

    <%- include('partials/footer') %>

    <script>
        // --- Улучшенный JS для модалки баланса ---
        const modal = document.getElementById('adjustBalanceModal');
        const modalUsernameSpan = document.getElementById('modalUsername');
        const modalCurrentBalanceSpan = document.getElementById('modalCurrentBalance');
        const modalUsernameInput = document.getElementById('modalUsernameInput');
        const newBalanceInput = document.getElementById('newBalanceInput');
        const modalError = document.getElementById('modalError');
        const adjustBalanceForm = document.getElementById('adjustBalanceForm');
        const adjustBalanceSubmitBtn = document.getElementById('adjustBalanceSubmitBtn');
        const adjustBtnText = adjustBalanceSubmitBtn.querySelector('.button-text');
        const originalAdjustBtnText = adjustBtnText.textContent;

        function openAdjustBalanceModal(username, currentBalance) {
            modalUsernameSpan.textContent = username;
            modalCurrentBalanceSpan.textContent = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(currentBalance);
            modalUsernameInput.value = username;
            newBalanceInput.value = parseFloat(currentBalance).toFixed(2);
            modalError.style.display = 'none';
            adjustBalanceSubmitBtn.disabled = false;
            adjustBtnText.textContent = originalAdjustBtnText;
            
           // Анимированное открытие модалки
           modal.style.display = 'block';
            setTimeout(() => {
                modal.classList.add('visible');
                document.body.style.overflow = 'hidden'; // Предотвращаем прокрутку фона
            }, 10);
            
            newBalanceInput.focus();
        }
        
        function closeAdjustBalanceModal() {
            // Анимированное закрытие модалки
            modal.classList.remove('visible');
            setTimeout(() => {
                modal.style.display = 'none';
                document.body.style.overflow = ''; // Возвращаем прокрутку
            }, 300);
        }
        
        // Закрытие по клику на фон
        window.onclick = function(event) {
            if (event.target == modal) {
                closeAdjustBalanceModal();
            }
        }

        // Обработка нажатия Escape для закрытия модалки
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && modal.style.display === 'block') {
                closeAdjustBalanceModal();
            }
        });

        adjustBalanceForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            modalError.style.display = 'none';
            adjustBalanceSubmitBtn.disabled = true;
            
            // Анимация кнопки отправки
            adjustBtnText.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Сохранение...';

            const username = modalUsernameInput.value;
            const newBalance = newBalanceInput.value;
            
            try {
                const response = await fetch(`/users/adjust-balance/${username}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ newBalance: newBalance })
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || `Ошибка ${response.status}`);
                }
                
                closeAdjustBalanceModal();
                
                // Обновляем значение в таблице с анимацией
                const userRow = document.getElementById(`user-row-${username}`);
                if (userRow) {
                    const balanceCell = userRow.cells[4];
                    if (balanceCell) {
                        const balanceValue = balanceCell.querySelector('.balance-value');
                        if (balanceValue) {
                            balanceValue.textContent = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(result.newBalance);
                            balanceValue.classList.add('updated');
                            setTimeout(() => balanceValue.classList.remove('updated'), 1000);
                        }
                    }
                }
                
                showUserListJsMessage('success', result.message || 'Баланс успешно изменен.');
            } catch (error) {
                console.error('Ошибка формы изменения баланса:', error);
                modalError.textContent = error.message || 'Произошла ошибка.';
                modalError.style.display = 'block';
                
                // Эффект встряски для поля с ошибкой
                newBalanceInput.classList.add('shake-error');
                setTimeout(() => newBalanceInput.classList.remove('shake-error'), 500);
                
                adjustBalanceSubmitBtn.disabled = false;
                adjustBtnText.textContent = originalAdjustBtnText;
            }
        });

        // --- Улучшенный JS для сообщений ---
        function showUserListJsMessage(type, text, allowHtml = false) {
            const container = document.getElementById('js-messages-user-list');
            if (!container) return;
            
            // Удаляем предыдущие сообщения с плавным исчезновением
            const existingMessages = container.querySelectorAll('.flash-message');
            existingMessages.forEach(msg => {
                msg.style.opacity = '0';
                msg.style.transform = 'translateY(-10px)';
                setTimeout(() => msg.remove(), 300);
            });
            
            // Создаем новое сообщение
            const messageDiv = document.createElement('div');
            messageDiv.className = `flash-message flash-${type}`;
            
            if (allowHtml) {
                messageDiv.innerHTML = text;
            } else {
                messageDiv.textContent = text;
            }
            
            // Добавляем кнопку закрытия, если её ещё нет
            if (!messageDiv.querySelector('.close-flash')) {
                const closeButton = document.createElement('button');
                closeButton.type = 'button';
                closeButton.className = 'close-flash';
                closeButton.innerHTML = '×';
                closeButton.onclick = () => {
                    messageDiv.style.opacity = '0';
                    messageDiv.style.transform = 'translateY(-10px)';
                    setTimeout(() => messageDiv.remove(), 300);
                };
                messageDiv.appendChild(closeButton);
            }
            
            // Добавляем сообщение в контейнер
            container.innerHTML = '';
            container.appendChild(messageDiv);
            
            // Автоматическое скрытие через 5 секунд, кроме сообщения с паролем
            if (!allowHtml || !messageDiv.querySelector('strong[id^="temp-pass-"]')) {
                setTimeout(() => {
                    if (messageDiv && messageDiv.parentNode) {
                        messageDiv.style.opacity = '0';
                        messageDiv.style.transform = 'translateY(-10px)';
                        setTimeout(() => {
                            if (messageDiv && messageDiv.parentNode) messageDiv.remove();
                        }, 300);
                    }
                }, 5000);
            }
        }

        // --- Улучшенные функции копирования ---
        function copyToClipboard(textToCopy, buttonElement) {
            if (!navigator.clipboard) {
                fallbackCopyToClipboard(textToCopy, buttonElement);
                return;
            }
            
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    const originalText = buttonElement.textContent;
                    buttonElement.innerHTML = '<i class="fas fa-check"></i> Скопировано!';
                    buttonElement.disabled = true;
                    buttonElement.classList.add('copied');
                    
                    setTimeout(() => {
                        if (buttonElement) {
                            buttonElement.textContent = originalText;
                            buttonElement.disabled = false;
                            buttonElement.classList.remove('copied');
                        }
                    }, 2000);
                })
                .catch(err => {
                    console.error('Clipboard API copy error:', err);
                    fallbackCopyToClipboard(textToCopy, buttonElement);
                });
        }
        
        function fallbackCopyToClipboard(text, buttonElement) {
            const textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.top = '-9999px';
            textArea.style.left = '-9999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            let success = false;
            try {
                success = document.execCommand('copy');
            } catch (err) {
                success = false;
            }
            
            document.body.removeChild(textArea);
            
            if (success && buttonElement) {
                const originalText = buttonElement.textContent;
                buttonElement.innerHTML = '<i class="fas fa-check"></i> Скопировано!';
                buttonElement.disabled = true;
                buttonElement.classList.add('copied');
                
                setTimeout(() => {
                    if (buttonElement) {
                        buttonElement.textContent = originalText;
                        buttonElement.disabled = false;
                        buttonElement.classList.remove('copied');
                    }
                }, 2000);
            } else {
                showUserListJsMessage('error', 'Не удалось скопировать текст в буфер обмена.');
            }
        }

        // --- Улучшенная пагинация с анимациями ---
        const tableBodyForPagination = document.getElementById('usersTableBody');
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationControls = document.getElementById('paginationControls');
        const paginationInfo = document.getElementById('paginationInfo');
        const itemsPerPageSelect = document.getElementById('itemsPerPageSelect');
        const allRows = tableBodyForPagination ? Array.from(tableBodyForPagination.querySelectorAll('tr')) : [];
        
        let currentPage = 1;
        let itemsPerPage = parseInt(itemsPerPageSelect.value);
        
        function displayPage(page) {
            if (!tableBodyForPagination) return;
            
            currentPage = page;
            const start = (page - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            
            // Сначала скрываем все строки с анимацией
            const visibleRows = Array.from(tableBodyForPagination.querySelectorAll('tr:not(.hidden-row)'));
            visibleRows.forEach(row => {
                row.style.opacity = '0';
                row.style.transform = 'translateY(-10px)';
                setTimeout(() => {
                    row.classList.add('hidden-row');
                    row.style.opacity = '';
                    row.style.transform = '';
                }, 150);
            });
            
            // Затем отображаем нужные строки с небольшой задержкой и анимацией
            setTimeout(() => {
                allRows.forEach((row, index) => {
                    if (index >= start && index < end) {
                        row.classList.remove('hidden-row');
                        row.style.opacity = '0';
                        row.style.transform = 'translateY(10px)';
                        
                        // Анимируем появление с задержкой для каждой строки
                        setTimeout(() => {
                            row.style.opacity = '1';
                            row.style.transform = 'translateY(0)';
                        }, (index - start) * 50);
                    }
                });
                
                renderPaginationControls();
                updatePaginationInfo();
            }, 200);
        }
        
        function renderPaginationControls() {
            const totalRowsOverall = allRows.length;
            
            if (!paginationControls || totalRowsOverall === 0) {
                if (paginationContainer) paginationContainer.style.display = 'none';
                return;
            }
            
            if (paginationContainer) paginationContainer.style.display = 'flex';
            paginationControls.innerHTML = '';
            
            const pageCount = Math.ceil(totalRowsOverall / itemsPerPage);
            
            if (pageCount <= 1) {
                paginationControls.innerHTML = '';
                return;
            }
            
            // Кнопка "Предыдущая страница"
            const prevButton = document.createElement('button');
            prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
            prevButton.disabled = currentPage === 1;
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) displayPage(currentPage - 1);
            });
            paginationControls.appendChild(prevButton);
            
            // Максимальное количество кнопок страниц для отображения
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(pageCount, startPage + maxVisiblePages - 1);
            
            // Если у нас меньше максимального числа страниц слева, добавим справа
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            // Если мы не начинаем с первой страницы, показываем первую и многоточие
            if (startPage > 1) {
                const firstPageBtn = document.createElement('button');
                firstPageBtn.textContent = '1';
                firstPageBtn.addEventListener('click', () => displayPage(1));
                paginationControls.appendChild(firstPageBtn);
                
                if (startPage > 2) {
                    const ellipsis = document.createElement('span');
                    ellipsis.textContent = '...';
                    ellipsis.style.margin = '0 5px';
                    paginationControls.appendChild(ellipsis);
                }
            }
            
            // Кнопки для страниц
            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                
                if (i === currentPage) {
                    pageButton.classList.add('active');
                    pageButton.disabled = true;
                }
                
                pageButton.addEventListener('click', () => displayPage(i));
                paginationControls.appendChild(pageButton);
            }
            
            // Если мы не заканчиваем последней страницей, показываем многоточие и последнюю
            if (endPage < pageCount) {
                if (endPage < pageCount - 1) {
                    const ellipsis = document.createElement('span');
                    ellipsis.textContent = '...';
                    ellipsis.style.margin = '0 5px';
                    paginationControls.appendChild(ellipsis);
                }
                
                const lastPageBtn = document.createElement('button');
                lastPageBtn.textContent = pageCount;
                lastPageBtn.addEventListener('click', () => displayPage(pageCount));
                paginationControls.appendChild(lastPageBtn);
            }
            
            // Кнопка "Следующая страница"
            const nextButton = document.createElement('button');
            nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
            nextButton.disabled = currentPage === pageCount;
            nextButton.addEventListener('click', () => {
                if (currentPage < pageCount) displayPage(currentPage + 1);
            });
            paginationControls.appendChild(nextButton);
        }
        
        function updatePaginationInfo() {
            const totalRowsOverall = allRows.length;
            
            if (!paginationInfo || totalRowsOverall === 0) {
                if (paginationInfo) paginationInfo.textContent = '';
                return;
            }
            
            const pageCount = Math.ceil(totalRowsOverall / itemsPerPage);
            const startItem = (currentPage - 1) * itemsPerPage + 1;
            const endItem = Math.min(currentPage * itemsPerPage, totalRowsOverall);
            
            paginationInfo.textContent = `${startItem}-${endItem} из ${totalRowsOverall} (стр. ${currentPage} из ${pageCount})`;
        }
        
        function updatePaginationAfterDelete() {
            const currentLiveRows = tableBodyForPagination ? Array.from(tableBodyForPagination.querySelectorAll('tr')) : [];
            
            // Обновляем исходный массив `allRows` для дальнейшей работы пагинации
            allRows.length = 0;
            allRows.push(...currentLiveRows);
            
            const totalRowsNow = allRows.length;
            const newPageCount = Math.ceil(totalRowsNow / itemsPerPage);
            
            if (currentPage > newPageCount && newPageCount > 0) {
                currentPage = newPageCount;
            } else if (newPageCount === 0) {
                currentPage = 1;
                
                // Если строк не осталось, показываем сообщение "Пользователи не найдены"
                if (tableBodyForPagination && totalRowsNow === 0) {
                    const emptyRow = document.createElement('tr');
                    emptyRow.innerHTML = `
                        <td colspan="6" style="text-align: center; padding: 30px;">
                            <i class="fas fa-users-slash" style="font-size: 3rem; color: #ddd; margin-bottom: 15px;"></i>
                            <p style="margin: 0;">Пользователи не найдены.</p>
                        </td>
                    `;
                    tableBodyForPagination.appendChild(emptyRow);
                }
            }
            
            displayPage(currentPage);
        }
        
        itemsPerPageSelect.addEventListener('change', (event) => {
            itemsPerPage = parseInt(event.target.value);
            displayPage(1);
        });
        
        // Инициализация пагинации при загрузке
        if (allRows.length > 0) {
            displayPage(1);
        } else {
            if (paginationContainer) paginationContainer.style.display = 'none';
        }

        // --- Улучшенный JS для сброса пароля ---
        const tempPasswordButtons = document.querySelectorAll('.set-temp-password-btn');
        
        tempPasswordButtons.forEach(button => {
            const buttonText = button.querySelector('.button-text');
            const originalHtml = buttonText.innerHTML;
            
            button.addEventListener('click', async (event) => {
                const username = button.dataset.username;
                
                // Анимированное модальное окно подтверждения
                const confirmed = await showCustomConfirm(`Сбросить пароль для пользователя <strong>${username}</strong>?`, 
                    'Пользователь получит новый временный пароль и должен будет сменить его при следующем входе.');
                
                if (!confirmed) return;
                
                button.disabled = true;
                buttonText.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i>';
                
                const jsMsgContainer = document.getElementById('js-messages-user-list');
                if (jsMsgContainer) jsMsgContainer.innerHTML = '';
                
                try {
                    const response = await fetch(`/users/set-temporary-password/${username}`, {
                        method: 'POST',
                        headers: { 'Accept': 'application/json' }
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok && result.success) {
                        const messageHtml = `
                            Временный пароль для <strong>${username}</strong>: 
                            <strong id="temp-pass-${username}" style="background-color: #f0f0f0; padding: 6px 10px; border-radius: 4px; margin: 0 5px; user-select: all; font-family: monospace;">${result.tempPassword}</strong> 
                            <button type="button" class="btn btn-secondary btn-small" style="margin-left: 10px;" onclick="copyToClipboard('${result.tempPassword.replace(/'/g, "\\'")}', this)">
                                <i class="fas fa-copy"></i> Копировать
                            </button>
                            <br><small>Сообщите пароль пользователю. Он должен будет сменить его при входе.</small>
                        `;
                        showUserListJsMessage('success', messageHtml, true);
                        
                        // Выделяем поле с паролем для удобства
                        setTimeout(() => {
                            const tempPassEl = document.getElementById(`temp-pass-${username}`);
                            if (tempPassEl) {
                                const range = document.createRange();
                                range.selectNode(tempPassEl);
                                const selection = window.getSelection();
                                selection.removeAllRanges();
                                selection.addRange(range);
                            }
                        }, 300);
                    } else {
                        throw new Error(result.error || 'Не удалось сбросить пароль.');
                    }
                } catch (error) {
                    console.error(`Error setting temp password for ${username}:`, error);
                    showUserListJsMessage('error', error.message || 'Произошла ошибка при сбросе пароля.');
                } finally {
                    button.disabled = false;
                    buttonText.innerHTML = originalHtml;
                }
            });
        });

        // --- Улучшенный JS для удаления пользователей ---
        const userTableBodyForDelete = document.querySelector('#usersTableBody');
        
        if (userTableBodyForDelete) {
            userTableBodyForDelete.addEventListener('submit', async (event) => {
                if (event.target && event.target.classList.contains('delete-user-form')) {
                    event.preventDefault();
                    
                    const form = event.target;
                    const username = form.dataset.username;
                    const deleteButton = form.querySelector('button[type="submit"]');
                    const buttonText = deleteButton.querySelector('.button-text');
                    const originalHtml = buttonText.innerHTML;
                    
                    if (!username || !deleteButton || !buttonText) return;
                    
                    // Анимированное модальное окно подтверждения
                    const confirmed = await showCustomConfirm(`Вы действительно хотите удалить пользователя <strong>${username}</strong>?`, 
                        'Это действие нельзя будет отменить. Все данные пользователя будут удалены.');
                    
                    if (!confirmed) return;
                    
                    deleteButton.disabled = true;
                    buttonText.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i>';
                    
                    document.getElementById('js-messages-user-list').innerHTML = '';
                    
                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            headers: { 'Accept': 'application/json' }
                        });
                        
                        const result = await response.json();
                        
                        if (response.ok && result.success) {
                            const row = document.getElementById(`user-row-${username}`);
                            
                            if (row) {
                                // Анимация удаления строки
                                row.style.transition = 'all 0.5s ease';
                                row.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                                row.style.opacity = '0';
                                row.style.transform = 'translateX(20px)';
                                
                                setTimeout(() => {
                                    row.remove();
                                    updatePaginationAfterDelete();
                                }, 500);
                            }
                            
                            showUserListJsMessage('success', result.message || `Пользователь ${username} успешно удален.`);
                        } else {
                            throw new Error(result.error || 'Не удалось удалить пользователя.');
                        }
                    } catch (error) {
                        console.error(`Error deleting ${username}:`, error);
                        showUserListJsMessage('error', error.message || 'Произошла ошибка при удалении пользователя.');
                        
                        // Разблокируем кнопку и возвращаем текст при ошибке
                        deleteButton.disabled = false;
                        buttonText.innerHTML = originalHtml;
                    }
                }
            });
        }
        
        // --- Кастомный диалог подтверждения ---
        function showCustomConfirm(title, message) {
            return new Promise((resolve) => {
                // Создаем модальное окно подтверждения
                const confirmModal = document.createElement('div');
                confirmModal.className = 'modal';
                confirmModal.id = 'customConfirmModal';
                confirmModal.style.display = 'block';
                confirmModal.style.zIndex = '1999';
                confirmModal.style.opacity = '0';
                confirmModal.style.transition = 'opacity 0.3s ease';
                
                const modalContent = document.createElement('div');
                modalContent.className = 'modal-content';
                modalContent.style.maxWidth = '450px';
                modalContent.style.transform = 'translateY(-30px)';
                modalContent.style.transition = 'transform 0.4s ease';
                
                modalContent.innerHTML = `
                    <h2 style="margin-top: 0;">${title}</h2>
                    <p>${message}</p>
                    <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px;">
                        <button id="confirmCancel" class="btn btn-secondary">Отмена</button>
                        <button id="confirmOk" class="btn btn-primary">Подтвердить</button>
                    </div>
                `;
                
                confirmModal.appendChild(modalContent);
                document.body.appendChild(confirmModal);
                
                // Анимация открытия
                setTimeout(() => {
                    confirmModal.style.opacity = '1';
                    modalContent.style.transform = 'translateY(0)';
                }, 10);
                
                // Обработчики кнопок
                document.getElementById('confirmOk').addEventListener('click', () => {
                    // Анимация закрытия
                    confirmModal.style.opacity = '0';
                    modalContent.style.transform = 'translateY(-30px)';
                    setTimeout(() => {
                        confirmModal.remove();
                    }, 300);
                    resolve(true);
                });
                
                document.getElementById('confirmCancel').addEventListener('click', () => {
                    // Анимация закрытия
                    confirmModal.style.opacity = '0';
                    modalContent.style.transform = 'translateY(-30px)';
                    setTimeout(() => {
                        confirmModal.remove();
                    }, 300);
                    resolve(false);
                });
                
                // Закрытие по клику на фон
                confirmModal.addEventListener('click', (event) => {
                    if (event.target === confirmModal) {
                        // Анимация закрытия
                        confirmModal.style.opacity = '0';
                        modalContent.style.transform = 'translateY(-30px)';
                        setTimeout(() => {
                            confirmModal.remove();
                        }, 300);
                        resolve(false);
                    }
                });
                
                // Закрытие по Escape
                document.addEventListener('keydown', function escHandler(event) {
                    if (event.key === 'Escape') {
                        document.removeEventListener('keydown', escHandler);
                        // Анимация закрытия
                        confirmModal.style.opacity = '0';
                        modalContent.style.transform = 'translateY(-30px)';
                        setTimeout(() => {
                            confirmModal.remove();
                        }, 300);
                        resolve(false);
                    }
                });
            });
        }
        
        // --- Дополнительные анимации при загрузке страницы ---
        document.addEventListener('DOMContentLoaded', function() {
            // Анимация заголовка страницы
            const pageTitle = document.querySelector('h1');
            if (pageTitle) {
                pageTitle.style.opacity = '0';
                pageTitle.style.transform = 'translateY(-20px)';
                
                setTimeout(() => {
                    pageTitle.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                    pageTitle.style.opacity = '1';
                    pageTitle.style.transform = 'translateY(0)';
                }, 100);
            }
            
            // Анимация кнопки добавления пользователя
            const addUserBtn = document.querySelector('.add-user');
            if (addUserBtn) {
                addUserBtn.style.opacity = '0';
                addUserBtn.style.transform = 'translateY(-10px)';
                
                setTimeout(() => {
                    addUserBtn.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                    addUserBtn.style.opacity = '1';
                    addUserBtn.style.transform = 'translateY(0)';
                }, 300);
            }
            
            // Добавление анимационных эффектов для стилей, определенных в CSS
            document.head.insertAdjacentHTML('beforeend', `
                <style>
                    @keyframes shake-error {
                        0%, 100% { transform: translateX(0); }
                        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
                        20%, 40%, 60%, 80% { transform: translateX(5px); }
                    }
                    
                    .shake-error {
                        animation: shake-error 0.5s cubic-bezier(.36,.07,.19,.97) both;
                    }
                </style>
            `);
        });
    </script>

</body>
</html>
