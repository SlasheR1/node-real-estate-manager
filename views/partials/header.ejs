<!-- views/partials/header.ejs -->
<!-- views/partials/header.ejs -->
<header class="main-header" data-username="<%= (typeof currentUser !== 'undefined' && currentUser && currentUser.username) ? currentUser.username : '' %>">
    <nav class="header-content">
        <a href="/" class="brand-logo">
            <img src="/images/logo.svg" alt="Real Estate Logo" class="logo-img">
            <span>RealEstate</span>
        </a>

        <div class="header-right">
            <div class="nav-links main-nav-links">
                <%# Общие ссылки %>
                <a href="/properties" class="nav-link">Объекты</a>

                <%# Ссылки для авторизованных пользователей %>
                <% if (currentUser) { %>
                    <%# Для Арендатора %>
                    <% if (currentUser.role === 'Tenant') { %>
                        <a href="/bookings" class="nav-link">
                            <i class="fas fa-calendar-check"></i>
                            <span>Мои бронирования</span>
                        </a>
                        <%# --- FIX: Corrected nested EJS tags --- %>
                        <a href="/chats" class="nav-link">
                            <i class="fas fa-comments"></i>
                            <span>Мои чаты</span>
                            <span class="unread-chats-badge" id="tenantChatsBadge" style="<%= locals.totalUnreadChatCount > 0 ? 'display: inline-block;' : 'display: none;' %>">
                                <%= locals.totalUnreadChatCount > 9 ? '9+' : locals.totalUnreadChatCount %>
                            </span>
                        </a>
                        <%# --- END FIX --- %>
                    <% } %>
                    <%# Управление Арендами (для всех кроме Tenant) %>
                    <% if (currentUser.role === 'Admin' || currentUser.role === 'Owner' || currentUser.role === 'Staff') { %>
                        <a href="/rentals" class="nav-link">
                            <i class="fas fa-tasks"></i>
                            <span>Упр. Арендами</span>
                        </a>
                    <% } %>
                    <%# Чаты для Owner/Staff %>
                    <% if ((currentUser.role === 'Owner' || currentUser.role === 'Staff') && currentUser.companyId) { %>
                        <%# --- FIX: Corrected nested EJS tags --- %>
                        <a href="/chats" class="nav-link">
                            <i class="fas fa-headset"></i>
                            <span>Чаты компании</span>
                            <span class="unread-chats-badge" id="companyChatsBadge" style="<%= locals.totalUnreadChatCount > 0 ? 'display: inline-block;' : 'display: none;' %>">
                                <%= locals.totalUnreadChatCount > 9 ? '9+' : locals.totalUnreadChatCount %>
                            </span>
                        </a>
                         <%# --- END FIX --- %>
                    <% } %>
                    <%# Добавить объект (для Admin и Owner с завершенным профилем) %>
                    <% if (currentUser.role === 'Admin' || (currentUser.role === 'Owner' && currentUser.companyProfileCompleted)) { %>
                         <a href="/properties/add" class="nav-link">
                             <i class="fas fa-plus-circle"></i>
                             <span>Добавить объект</span>
                         </a>
                    <% } %>
                    <%# Управление компанией (для Owner и Staff с привязанным companyId) %>
                    <% if ((currentUser.role === 'Owner' || currentUser.role === 'Staff') && currentUser.companyId) { %>
                          <a href="/company/manage" class="nav-link">
                              <i class="fas fa-building"></i>
                              <span>Моя Компания</span>
                          </a>
                     <% } %>
                    <%# Управление пользователями (только для Admin) %>
                    <% if (currentUser.role === 'Admin') { %>
                        <a href="/users" class="nav-link">
                            <i class="fas fa-users-cog"></i>
                            <span>Пользователи</span>
                        </a>
                    <% } %>
                <% } else { %>
                    <%# Ссылки для неавторизованных %>
                    <a href="/login" class="nav-link auth-link">
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Войти</span>
                    </a>
                    <a href="/register" class="nav-link auth-link register-btn">
                        <i class="fas fa-user-plus"></i>
                        <span>Регистрация</span>
                    </a>
                <% } %>
            </div>

            <%# Блок профиля и уведомлений для авторизованных %>
            <% if (currentUser) { %>
                <div class="user-profile-wrapper">
                    <!-- === Кнопка Уведомлений (Колокольчик) === -->
                    <button id="notificationToggleBtn" type="button" title="Уведомления" class="notification-btn">
                        <i class="fas fa-bell"></i>
                        <span id="unreadCountBadgeHeader" class="notification-badge">0</span>
                    </button>
                    <!-- === Конец Кнопки Уведомлений === -->

                   <div class="user-profile">
                        <a href="/profile" class="profile-link" title="Профиль">
                            <div class="user-info">
                                <span class="user-name" id="headerUserName"><%= currentUser.fullName || currentUser.username %></span>
                                <div class="user-sub-info">
                                    <span class="user-role" id="headerUserRole"><%= currentUser.role %></span>
                                    <% if (currentUser.role === 'Tenant') { %>
                                        <span class="user-balance profile-sub-optional" id="headerUserBalance"><%= new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(currentUser.balance ?? 0) %></span>
                                    <% } else { %>
                                        <span class="user-balance profile-sub-optional" id="headerUserBalance" style="display: none;"></span>
                                    <% } %>
                                </div>
                            </div>
                            <div class="avatar-container" id="headerAvatarContainer">
                                <%# --- FIX: Removed potentially problematic try/catch --- %>
                                <%
                                    let avatarSrc = '/images/placeholder-avatar.png';
                                    if (currentUser && currentUser.imageData && typeof currentUser.imageData === 'string') {
                                        let imageType = currentUser.imageData.startsWith('/9j/')?'image/jpeg':'image/png';
                                        avatarSrc = `data:${imageType};base64,${currentUser.imageData}`;
                                    }
                                %>
                                <img src="<%= avatarSrc %>" alt="Avatar" class="user-avatar" id="headerUserAvatar">
                                <%# --- END FIX --- %>
                            </div>
                        </a>
                        <form action="/logout" method="POST" class="logout-form">
                            <button type="submit" class="btn btn-logout" title="Выйти">
                                <i class="fas fa-sign-out-alt"></i>
                            </button>
                        </form>
                    </div>

                    <!-- === Глобальная Панель Уведомлений (ВНУТРИ WRAPPER) === -->
                    <div class="notification-panel global-notification-panel" id="globalNotificationPanel">
                        <div class="notification-header">
                            <h3><i class="fas fa-bell"></i> Уведомления</h3>
                            <button id="globalClearNotificationsBtn" class="btn btn-link btn-small" title="Очистить все">Очистить</button>
                        </div>
                        <div class="notification-list-container" id="globalNotificationListContainer">
                            <ul class="notification-list" id="globalNotificationList">
                                <li class="no-notifications">Нет новых уведомлений</li>
                            </ul>
                        </div>
                    </div>
                    <!-- === Конец Глобальной Панели Уведомлений === -->
                </div>
             <% } %>
        </div>
        <%# Кнопка мобильного меню %>
        <button class="mobile-nav-toggle" aria-label="Открыть меню">
            <span class="hamburger-line"></span>
            <span class="hamburger-line"></span>
            <span class="hamburger-line"></span>
        </button>
    </nav>

    <!-- ===== Модальное окно обновления ===== -->
    <div id="updateModalOverlay" style="display: none;">
         <div id="updateModalContent" class="">
            <h2 id="updateModalTitle">Обновление Приложения</h2>
            <p id="updateModalMessage">Проверяем наличие обновлений...</p>
            <div id="updateProgressContainer">
                <div id="updateProgressBar"></div>
            </div>
            <div id="updateModalActions">
                 <button id="updateModalRestartButton" class="btn btn-primary">Перезапустить и установить</button>
                 <button id="updateModalCloseButton" class="btn btn-secondary">Закрыть</button>
            </div>
             <small id="updateErrorDetails"></small>
        </div>
    </div>
    <div id="toast-notification-container"></div>
    <!-- ============================================================= -->
</header>

<style>
/* ===== ОСНОВНЫЕ СТИЛИ ХЕДЕРА ===== */
.main-header {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    transition: all 0.3s ease;
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.7rem 1.5rem;
    max-width: 1400px;
    margin: 0 auto;
}

/* Логотип */
.brand-logo {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: rgb(0, 0, 0);
    font-weight: 700;
    font-size: 1.5rem;
    transition: all 0.2s ease;
}

.brand-logo:hover {
    transform: translateY(-1px);
}

.logo-img {
    height: 35px;
    margin-right: 0.6rem;
}

/* Правая часть хедера */
.header-right {
    display: flex;
    align-items: center;
    gap: 1.2rem;
}

/* Навигационные ссылки */
.nav-links {
    display: flex;
    gap: 0.8rem;
    align-items: center;
}

.nav-link {
    display: flex;
    align-items: center;
    padding: 0.5rem 0.8rem;
    color: #4b5563;
    text-decoration: none;
    font-weight: 500;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    gap: 0.4rem;
}

.nav-link i {
    font-size: 0.95rem;
    opacity: 0.8;
}

.nav-link:hover {
    color: #2563eb;
    background-color: rgba(37, 99, 235, 0.08);
}

/* Авторизационные ссылки */
.auth-link {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    border-radius: 0.5rem;
    border: 1px solid transparent;
}

.auth-link.register-btn {
    background-color: #2563eb;
    color: white;
    border: 1px solid #2563eb;
}

.auth-link.register-btn:hover {
    background-color: #1d4ed8;
    color: white;
}

/* Блок профиля пользователя */
.user-profile-wrapper {
    display: flex;
    align-items: center;
    position: relative;
    gap: 1rem;
}

.notification-btn {
    background: none;
    border: none;
    font-size: 1.2rem;
    color: #64748b;
    cursor: pointer;
    padding: 0.5rem;
    position: relative;
    border-radius: 50%;
    transition: all 0.2s ease;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.notification-btn:hover {
    background-color: rgba(0, 0, 0, 0.05);
    color: #2563eb;
}

.notification-badge {
    position: absolute;
    top: 2px;
    right: 2px;
    background-color: #dc3545;
    color: white;
    font-size: 0.65rem;
    padding: 1px 4px;
    border-radius: 50%;
    min-width: 15px;
    height: 15px;
    line-height: 13px;
    text-align: center;
    font-weight: bold;
    display: none;
}

.user-profile {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    border-radius: 0.6rem;
    padding: 0.3rem 0.5rem; /* Уменьшенный padding для контроля высоты */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.06);
    transition: all 0.3s ease;
    max-height: 50px; /* Ограничение высоты */
    overflow: hidden; /* Обрезаем переполнение */
}

.user-profile:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.profile-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: inherit;
    gap: 0.6rem; /* Уменьшенный gap */
    padding: 0;
}

.user-info {
    display: flex;
    flex-direction: column;
    max-width: 150px; /* Уменьшенный max-width */
    line-height: 1.2; /* Корректировка высоты текста */
}

.user-name {
    font-weight: 600;
    color: #1e293b;
    font-size: 0.9rem; /* Уменьшенный размер шрифта */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding-top: 2px; /* Небольшой отступ сверху */
}

.user-sub-info {
    display: flex;
    align-items: center;
    gap: 0.3rem; /* Уменьшенный gap */
    font-size: 0.7rem; /* Уменьшенный размер шрифта */
    color: #64748b;
    flex-wrap: wrap;
    max-height: 18px; /* Ограничение высоты */
    overflow: hidden; /* Обрезаем переполнение */
}

.user-role {
    background-color: rgba(37, 99, 235, 0.1);
    padding: 0.1rem 0.4rem;
    border-radius: 0.3rem;
    font-weight: 500;
    color: #2563eb;
}

.user-balance {
    font-weight: 500;
    color: #4b5563;
}

.user-company {
    display: flex;
    align-items: center;
    background-color: #f1f5f9; 
    padding: 0.1rem 0.4rem;
    border-radius: 0.3rem;
    font-size: 0.7rem;
    color: #4a5568;
    max-width: 120px; /* Ограничение ширины */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.company-info-visible {
    display: inline-flex;
}

.user-company i {
    font-size: 0.8em;
    margin-right: 2px;
    opacity: 0.7;
}

.avatar-container {
    width: 38px;
    height: 38px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid rgba(37, 99, 235, 0.2);
    transition: all 0.3s ease;
}

.avatar-container:hover {
    border-color: rgba(37, 99, 235, 0.5);
}

.user-avatar {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.btn-logout {
    background: none;
    border: none;
    color: #64748b;
    cursor: pointer;
    font-size: 1.1rem;
    padding: 0.4rem;
    border-radius: 50%;
    transition: all 0.2s ease;
    margin-left: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-logout:hover {
    color: #ef4444;
    background-color: rgba(239, 68, 68, 0.1);
}

/* Мобильное меню */
.mobile-nav-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    flex-direction: column;
    justify-content: space-between;
    height: 20px;
    width: 26px;
    padding: 0;
}

.hamburger-line {
    display: block;
    height: 2px;
    width: 100%;
    background-color: #4b5563;
    border-radius: 2px;
    transition: all 0.3s ease;
}

/* Панель уведомлений */
.notification-panel {
    position: absolute;
    top: calc(100% + 10px);
    right: 0;
    width: 360px;
    background-color: white;
    border-radius: 0.6rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
    transition: all 0.3s ease;
    z-index: 1001;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.08);
}

.notification-panel.active {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.8rem 1.2rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
    background-color: #f8fafc;
}

.notification-header h3 {
    margin: 0;
    font-size: 0.95rem;
    font-weight: 600;
    color: #1e293b;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.notification-header h3 i {
    color: #2563eb;
}

.btn-small {
    font-size: 0.8rem;
    padding: 0.2rem 0.5rem;
    color: #64748b;
    text-decoration: none;
    border-radius: 0.3rem;
    transition: all 0.2s ease;
}

.btn-small:hover {
    color: #ef4444;
    background-color: rgba(239, 68, 68, 0.1);
}

.notification-list-container {
    max-height: calc(90vh - 200px);
    overflow-y: auto;
}

.notification-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

.notification-item {
    padding: 0.8rem 1.2rem;
    display: flex;
    align-items: flex-start;
    gap: 0.8rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    transition: all 0.2s ease;
    cursor: pointer;
}

.notification-item:hover {
    background-color: #f8fafc;
}

.notification-item.unread {
    background-color: rgba(37, 99, 235, 0.05);
}

.notification-item .icon {
    color: #64748b;
    font-size: 1.1rem;
    margin-top: 0.2rem;
}

.notification-item.success .icon {
    color: #10b981;
}

.notification-item.warning .icon {
    color: #f59e0b;
}

.notification-item.error .icon {
    color: #ef4444;
}

.notification-item.info .icon {
    color: #3b82f6;
}

.notification-item .content {
    flex: 1;
}

.notification-item .title {
    font-weight: 600;
    color: #1e293b;
    font-size: 0.9rem;
    margin-bottom: 0.2rem;
    display: block;
}

.notification-item .message {
    color: #4b5563;
    font-size: 0.85rem;
    line-height: 1.4;
}

.notification-item .timestamp {
    color: #94a3b8;
    font-size: 0.75rem;
    margin-top: 0.3rem;
}

.notification-item .close-btn {
    background: none;
    border: none;
    color: #94a3b8;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.2rem;
    line-height: 1;
    border-radius: 50%;
    transition: all 0.2s ease;
    margin-left: 0.5rem;
}

.notification-item .close-btn:hover {
    color: #ef4444;
    background-color: rgba(239, 68, 68, 0.1);
}

.no-notifications {
    padding: 2rem 0;
    text-align: center;
    color: #94a3b8;
    font-size: 0.9rem;
    font-style: italic;
}

/* Модальное окно обновления */
#updateModalOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 1050;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

#updateModalContent {
    background-color: #fff;
    padding: 30px 40px;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
    width: 90%;
    max-width: 550px;
    text-align: center;
    border-top: 5px solid #5bc0de;
    transform: translateY(-20px);
    transition: transform 0.3s ease, opacity 0.3s ease;
    opacity: 0;
}

#updateModalTitle {
    margin-top: 0;
    margin-bottom: 15px;
    color: #2c3e50;
    font-size: 1.7rem;
    font-weight: 600;
}

#updateModalMessage {
    color: #555;
    margin-bottom: 25px;
    line-height: 1.6;
    font-size: 1.05rem;
}

#updateProgressContainer {
    display: none;
    margin-bottom: 25px;
    background-color: #e9ecef;
    border-radius: 5px;
    overflow: hidden;
    height: 12px;
    border: 1px solid #dee2e6;
}

#updateProgressBar {
    width: 0%;
    height: 100%;
    background-color: #5cb85c;
    background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem;
    border-radius: 4px;
    transition: width 0.2s linear;
    animation: progress-bar-stripes 1s linear infinite;
}

#updateModalRestartButton {
    display: none;
    padding: 12px 30px;
    font-size: 1rem;
    margin: 5px;
    min-width: 150px;
    background-color: #2563eb;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

#updateModalRestartButton:hover {
    background-color: #1d4ed8;
}

#updateModalCloseButton {
    display: none;
    padding: 12px 20px;
    font-size: 1rem;
    margin: 5px;
    background-color: #e2e8f0;
    color: #334155;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

#updateModalCloseButton:hover {
    background-color: #cbd5e1;
}

#updateErrorDetails {
    display: none;
    color: #dc3545;
    margin-top: 15px;
    font-size: 0.9em;
    line-height: 1.5;
    word-wrap: break-word;
}

@keyframes progress-bar-stripes {
    from { background-position: 1rem 0; }
    to { background-position: 0 0; }
}

/* Медиа-запросы для адаптивности */
@media (max-width: 1024px) {
    .user-info {
        max-width: 120px; /* Уменьшенный max-width для адаптивности */
    }
}

@media (max-width: 900px) {
    .main-nav-links a span {
        display: none;
    }
    
    .main-nav-links a i {
        font-size: 1.1rem;
        margin: 0;
    }
    
    .nav-link {
        padding: 0.5rem;
        justify-content: center;
        width: 36px;
        height: 36px;
    }
}

@media (max-width: 768px) {
    .header-content {
        padding: 0.5rem 1rem;
    }
    
    .brand-logo {
        font-size: 1.2rem;
    }
    
    .logo-img {
        height: 28px;
    }
    
    .header-right {
        gap: 0.6rem;
    }
    
    .nav-links {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: white;
        flex-direction: column;
        padding: 0.8rem 0;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }
    
    .nav-links.open {
        display: flex;
    }
    
    .nav-link {
        width: 100%;
        justify-content: flex-start;
        padding: 0.8rem 1.5rem;
        border-radius: 0;
    }
    
    .nav-link span {
        display: inline;
    }
    
    .mobile-nav-toggle {
        display: flex;
    }
    
    .avatar-container {
        width: 36px;
        height: 36px;
    }
    
    .user-name {
        font-size: 0.85rem;
    }
    
    .user-sub-info {
        font-size: 0.7rem;
    }
    
    .notification-panel {
        width: 300px;
        right: -70px;
    }
}

@media (max-width: 480px) {
    .user-info {
        display: none;
    }
    
    .notification-panel {
        width: 100%;
        right: 0;
        left: 0;
        transform: translateY(-20px);
    }
    
    .notification-badge {
        top: 0;
        right: 0;
    }
}
</style>
<!-- views/partials/header.ejs -->
<!-- ======================== ГЛОБАЛЬНЫЙ СКРИПТ ДЛЯ HEADER ======================== -->
<!-- Подключаем Socket.IO клиент -->
<script src="/socket.io/socket.io.js"></script>
<script>
    // Глобальная функция для обновления бейджа чата в хедере
    window.updateHeaderChatBadge = function(count) {
        console.log('[Header] Updating chat badge with count:', count);
        try {
            const tenantBadge = document.getElementById('tenant-chat-badge');
            const companyBadge = document.getElementById('company-chat-badge');
            
            console.log('[Header] Found badges:', {
                tenantBadge: !!tenantBadge,
                companyBadge: !!companyBadge
            });

            // Проверяем, какой бейдж активен (видим)
            const targetBadge = tenantBadge?.style.display !== 'none' ? tenantBadge : 
                              (companyBadge?.style.display !== 'none' ? companyBadge : null);

            if (targetBadge) {
                console.log('[Header] Updating badge:', targetBadge.id);
                targetBadge.textContent = count;
                targetBadge.style.display = count > 0 ? 'inline-block' : 'none';
                
                // Добавляем анимацию для новых сообщений
                if (count > 0) {
                    targetBadge.classList.add('pulse');
                    setTimeout(() => targetBadge.classList.remove('pulse'), 1000);
                }
            } else {
                console.warn('[Header] No visible badge found to update');
            }
        } catch (error) {
            console.error('[Header] Error updating chat badge:', error);
        }
    };

    // Используем IIFE для изоляции области видимости основного скрипта
    (function() {
        console.log("[Header Script] Initializing...");

        // --- Переменные и константы ---
        const MAX_GLOBAL_HISTORY_ITEMS = 15;
        let isNotificationPanelOpen = false;
        let notificationTimeoutId = null;
        let socket = null; // Глобальная переменная сокета для этого скрипта
        let currentUsername = null; // Инициализируем как null
        // Переменные для элементов DOM
        let globalNotificationList = null;
        let globalNoNotificationsMsg = null;
        let notificationToggleButton = null;
        let globalNotificationPanel = null;
        let unreadNotificationBadgeHeader = null; // Бейдж уведомлений (колокольчик)
        let globalClearNotificationsBtn = null;

        // --- Функции для УВЕДОМЛЕНИЙ (Колокольчик) ---
        function generateUniqueId() { return '_' + Math.random().toString(36).substring(2, 9) + Date.now(); }

        function createNotificationElement(notification) {
            const li = document.createElement('li');
            li.className = `notification-item ${notification.type || 'info'}`;
            if (notification.read !== true) { li.classList.add('unread'); }
            li.dataset.id = notification.id;
            li.dataset.bookingId = notification.bookingId || '';
            let iconClass = 'fa-info-circle';
            switch(notification.type) {
                case 'success': iconClass = 'fa-check-circle'; break;
                case 'warning': iconClass = 'fa-exclamation-triangle'; break;
                case 'error':   iconClass = 'fa-times-circle'; break;
                case 'info':    iconClass = 'fa-bell'; break;
                case 'booking': iconClass = 'fa-calendar-check'; break;
            }
            let ts = notification.timestamp;
            let d = new Date(); // Fallback date
             try {
                if (typeof ts === 'number') {
                    d = new Date(ts);
                    if (isNaN(d.getTime())) d = new Date(); // Check validity
                } else if (typeof ts === 'string') {
                    d = new Date(Date.parse(ts));
                    if (isNaN(d.getTime())) d = new Date();
                } else {
                    d = new Date();
                }
             } catch (e) {
                 console.warn("Error parsing notification timestamp, using current time:", e);
                 d = new Date();
             }

            const timeString = d.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            const dateString = d.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
            li.innerHTML = `
                <div class="icon"><i class="fas ${iconClass}"></i></div>
                <div class="content">
                    <span class="title">${notification.title||''}</span>
                    <div class="message">${notification.message||''}</div>
                    <div class="timestamp">${dateString} ${timeString}</div>
                </div>
                <button class="close-btn" title="Удалить уведомление">×</button>`;
            const closeBtn = li.querySelector('.close-btn');
            if (closeBtn) { closeBtn.addEventListener('click', function(event) { event.stopPropagation(); removeNotificationFromPanel(notification.id); }); }
            if (notification.bookingId) { li.addEventListener('click', () => { window.location.href = `/rentals`; toggleNotificationPanel(); }); }
            return li;
        }

        function displayInitialNotifications(notifications) {
             if (!globalNotificationList || !Array.isArray(notifications)) {
                 console.warn("Cannot display initial notifications: list container not found or data invalid.");
                 return;
             }
              // Пересоздаем плейсхолдер, если нужно
              if (!globalNoNotificationsMsg) {
                  globalNoNotificationsMsg = document.createElement('li');
                  globalNoNotificationsMsg.className = 'no-notifications';
                  globalNoNotificationsMsg.style.cssText = "text-align: center; color: #95a5a6; padding: 15px; font-style: italic; font-size: 0.85rem;";
                  globalNoNotificationsMsg.textContent = 'Нет новых уведомлений';
              }

             globalNotificationList.innerHTML = ''; // Очищаем список
             if (notifications.length === 0) {
                 globalNotificationList.appendChild(globalNoNotificationsMsg); // Показываем сообщение
             } else {
                 notifications.forEach(notification => {
                      if (notification && notification.id) { // Проверка валидности уведомления
                          globalNotificationList.appendChild(createNotificationElement(notification));
                      } else { console.warn("Skipping invalid initial notification object:", notification); }
                  });
                  // Удаляем плейсхолдер, если он вдруг остался
                  if (globalNoNotificationsMsg.parentNode === globalNotificationList) {
                       globalNotificationList.removeChild(globalNoNotificationsMsg);
                  }
             }
             updateUnreadNotificationCountHeader(null, true); // Пересчитываем бейдж
        }

        function addNewNotificationToPanel(notificationData) {
             if (!globalNotificationList) return;
              if (!globalNoNotificationsMsg) { // Пересоздаем если нужно
                   globalNoNotificationsMsg = document.createElement('li');
                   globalNoNotificationsMsg.className = 'no-notifications';
                   globalNoNotificationsMsg.style.cssText = "text-align: center; color: #95a5a6; padding: 15px; font-style: italic; font-size: 0.85rem;";
                   globalNoNotificationsMsg.textContent = 'Нет новых уведомлений';
              }
             const placeholder = globalNotificationList.querySelector('.no-notifications');
             if(placeholder) placeholder.remove();
             if (notificationData && notificationData.id) {
                 const li = createNotificationElement(notificationData);
                 globalNotificationList.prepend(li); // Добавляем В НАЧАЛО
                 // Ограничиваем количество элементов
                 while (globalNotificationList.children.length > MAX_GLOBAL_HISTORY_ITEMS) { const lastItem = globalNotificationList.lastElementChild; if (lastItem) globalNotificationList.removeChild(lastItem); else break; }
             } else { console.warn("Attempted to add invalid notification data:", notificationData); }
             // Обновляем счетчик уведомлений в шапке
             if (!isNotificationPanelOpen) { updateUnreadNotificationCountHeader(1); } else { updateUnreadNotificationCountHeader(null, true); }
        }

        function removeNotificationFromPanel(notificationId) {
             const item = globalNotificationList ? globalNotificationList.querySelector(`.notification-item[data-id="${notificationId}"]`) : null;
             if (!item) return;
             const wasUnread = item.classList.contains('unread');
             item.style.transition = 'opacity 0.3s ease, transform 0.3s ease'; item.style.opacity = 0; item.style.transform = 'translateX(20px)';
             setTimeout(() => {
                  if (item.parentNode) item.remove();
                  if (socket && notificationId && !notificationId.startsWith('_')) { socket.emit('delete_notification', notificationId); }
                  if (globalNotificationList && globalNotificationList.children.length === 0) {
                        if (!globalNoNotificationsMsg) { // Пересоздаем если нужно
                            globalNoNotificationsMsg = document.createElement('li');
                            globalNoNotificationsMsg.className = 'no-notifications';
                            globalNoNotificationsMsg.style.cssText="text-align: center; color: #95a5a6; padding: 15px; font-style: italic; font-size: 0.85rem;";
                            globalNoNotificationsMsg.textContent = 'Нет новых уведомлений';
                       }
                       globalNotificationList.appendChild(globalNoNotificationsMsg);
                  }
                  if (wasUnread) { updateUnreadNotificationCountHeader(null, true); }
             }, 300);
        }

        function clearAllNotifications() {
             if (!confirm("Удалить все уведомления?")) return;
             if (globalNotificationList) {
                 globalNotificationList.innerHTML = '';
                  if (!globalNoNotificationsMsg) { // Пересоздаем если нужно
                       globalNoNotificationsMsg = document.createElement('li');
                       globalNoNotificationsMsg.className = 'no-notifications';
                       globalNoNotificationsMsg.style.cssText="text-align: center; color: #95a5a6; padding: 15px; font-style: italic; font-size: 0.85rem;";
                       globalNoNotificationsMsg.textContent = 'Нет новых уведомлений';
                  }
                 globalNotificationList.appendChild(globalNoNotificationsMsg);
             }
             if (socket) { socket.emit('clear_all_notifications'); }
             updateUnreadNotificationCountHeader(0, true);
        }

        function markAllVisibleNotificationsAsRead() {
             if (!globalNotificationList || !socket) return;
             const idsToMark = []; const items = globalNotificationList.querySelectorAll('.notification-item.unread');
             if (items.length === 0) return;
             items.forEach(item => { item.classList.remove('unread'); const id = item.dataset.id; if (id && !id.startsWith('_')) { idsToMark.push(id); } });
             if (idsToMark.length > 0) { socket.emit('mark_notifications_read', idsToMark); console.log(`[Notifications] Sent 'mark_notifications_read' for IDs:`, idsToMark); }
             updateUnreadNotificationCountHeader(0, true);
        }

        function updateUnreadNotificationCountHeader(change = null, forceRecalculate = false) {
            if (!unreadNotificationBadgeHeader || !globalNotificationList) return;
            let count = 0;
            if (forceRecalculate || change === 0) { count = globalNotificationList.querySelectorAll('.notification-item.unread').length; }
            else if (change !== null) { const currentCount = parseInt(unreadNotificationBadgeHeader.textContent) || 0; count = Math.max(0, currentCount + change); }
            else { return; }
            count = Math.max(0, count);
            if (count > 0) { unreadNotificationBadgeHeader.textContent = count > 9 ? '9+' : count; unreadNotificationBadgeHeader.style.display = 'inline-block'; }
            else { unreadNotificationBadgeHeader.style.display = 'none'; }
        }

        function toggleNotificationPanel() {
             if (!globalNotificationPanel) return;
             isNotificationPanelOpen = !globalNotificationPanel.classList.contains('active');
             globalNotificationPanel.classList.toggle('active', isNotificationPanelOpen);
             if (isNotificationPanelOpen) { markAllVisibleNotificationsAsRead(); }
        }

        function showToastNotification(data) {
             const container = document.getElementById('toast-notification-container'); if (!container || !data) return; const toastId = `toast-${data.id || Date.now()}`; const existingToast = document.getElementById(toastId); if (existingToast) existingToast.remove(); const toastDiv = document.createElement('div'); toastDiv.className = `toast-notification ${data.type || 'info'}`; toastDiv.id = toastId;
             toastDiv.onclick = (e) => { if (!e.target.closest('button') && data.chatId) { window.location.href = `/chats/${data.chatId}`; hideToast(toastDiv); } };
             let iconClass = 'fa-comment-dots'; let borderColor = 'var(--primary-accent, #0d6efd)'; if (data.type === 'error') { iconClass = 'fa-exclamation-circle'; borderColor = 'var(--danger-color, #dc3545)'; } else if (data.type === 'warning') { iconClass = 'fa-exclamation-triangle'; borderColor = 'var(--warning-color, #ffc107)'; } else if (data.type === 'success') { iconClass = 'fa-check-circle'; borderColor = 'var(--success-color, #198754)'; } toastDiv.style.borderLeftColor = borderColor;
             toastDiv.innerHTML = `<div class="toast-icon" style="color: ${borderColor};"><i class="fas ${iconClass}"></i></div> <div class="toast-content"> <h5 class="toast-title">${data.senderName || 'Уведомление'}</h5> <p class="toast-message">${data.text || ''}</p> ${data.chatId ? `<div class="toast-actions"> <button class="btn-toast-read" data-chat-id="${data.chatId}">Прочитано</button> <button class="btn-toast-open" data-chat-id="${data.chatId}">Перейти</button> </div>` : ''} </div>`;
             if (data.chatId) { const readButton = toastDiv.querySelector('.btn-toast-read'); const openButton = toastDiv.querySelector('.btn-toast-open'); if (readButton) readButton.addEventListener('click', (e) => { e.stopPropagation(); markChatAsRead(data.chatId); hideToast(toastDiv); }); if (openButton) openButton.addEventListener('click', (e) => { e.stopPropagation(); window.location.href = `/chats/${data.chatId}`; hideToast(toastDiv); }); }
             container.prepend(toastDiv); requestAnimationFrame(() => { toastDiv.classList.add('show'); });
             if (data.chatId && data.type !== 'error') { try { new Audio('/sounds/new_message.mp3').play().catch(e => {}); } catch (e) {} } setTimeout(() => { hideToast(toastDiv); }, 7000);
        }
        function hideToast(toastElement) {
             if (!toastElement || !toastElement.parentNode) return; toastElement.classList.remove('show'); toastElement.classList.add('hide'); setTimeout(() => { if (toastElement.parentNode) toastElement.parentNode.removeChild(toastElement); }, 500);
        }
        function markChatAsRead(chatId) {
             if (socket && chatId) { socket.emit('mark_chat_read', chatId); console.log(`Sent mark_chat_read event for chat ${chatId} from toast`); }
        }

        // --- Основной Запуск Скрипта ---
        document.addEventListener('DOMContentLoaded', () => {
            console.log("[Header Script] DOMContentLoaded fired.");
            // --- Получаем username из data-атрибута ТЕГА HEADER ---
            const headerElement = document.querySelector('.main-header'); // Находим сам хедер
            if (headerElement) {
                currentUsername = headerElement.dataset.username || null; // Читаем атрибут
            } else {
                console.error("[Header Script] Cannot find header element (.main-header) to read username!");
                currentUsername = null;
            }

            if (currentUsername) {
                 console.log("[Header Script] Current user identified from header data:", currentUsername);
            } else {
                 console.log("[Header Script] No current user identified from header data.");
            }

            // --- Инициализация DOM элементов ---
            globalNotificationList = document.getElementById('globalNotificationList');
            if (globalNotificationList && !globalNotificationList.querySelector('.no-notifications')) {
                 globalNoNotificationsMsg = document.createElement('li');
                 globalNoNotificationsMsg.className = 'no-notifications';
                 globalNoNotificationsMsg.style.cssText = "text-align: center; color: #95a5a6; padding: 15px; font-style: italic; font-size: 0.85rem;";
                 globalNoNotificationsMsg.textContent = 'Нет новых уведомлений';
                 globalNotificationList.appendChild(globalNoNotificationsMsg);
            } else if (globalNotificationList) {
                 globalNoNotificationsMsg = globalNotificationList.querySelector('.no-notifications');
            }
            notificationToggleButton = document.getElementById('notificationToggleBtn');
            globalNotificationPanel = document.getElementById('globalNotificationPanel');
            unreadNotificationBadgeHeader = notificationToggleButton ? notificationToggleButton.querySelector('#unreadCountBadgeHeader') : null;
            globalClearNotificationsBtn = document.getElementById('globalClearNotificationsBtn');

            // --- Логируем найденные элементы ---
            console.log("DOM Elements (after init):", {
                globalNotificationList: !!globalNotificationList,
                globalNoNotificationsMsg: !!globalNoNotificationsMsg,
                notificationToggleButton: !!notificationToggleButton,
                globalNotificationPanel: !!globalNotificationPanel,
                unreadNotificationBadgeHeader: !!unreadNotificationBadgeHeader,
                globalClearNotificationsBtn: !!globalClearNotificationsBtn
            });

            // --- Привязка обработчиков событий к кнопкам ---
            if (notificationToggleButton) { notificationToggleButton.addEventListener('click', (event) => { event.stopPropagation(); toggleNotificationPanel(); }); }
            if (globalClearNotificationsBtn) { globalClearNotificationsBtn.addEventListener('click', clearAllNotifications); }
            document.addEventListener('click', (event) => { if (isNotificationPanelOpen && globalNotificationPanel && notificationToggleButton && !globalNotificationPanel.contains(event.target) && event.target !== notificationToggleButton && !notificationToggleButton.contains(event.target)) { toggleNotificationPanel(); } });

         
            // --- Инициализация Socket.IO (ТОЛЬКО ЕСЛИ ПОЛЬЗОВАТЕЛЬ АВТОРИЗОВАН) ---
            if (currentUsername && !window.socket) { // Добавляем проверку на существование сокета
                try {
                    console.log('[Header Script] Attempting Socket.IO connection...');
                    window.socket = io({ reconnectionAttempts: 5, reconnectionDelay: 3000 });

                    window.socket.on('connect', () => {
                        console.log('[Socket.IO Client] Connected! Socket ID:', window.socket.id);
                        console.log(`[Socket.IO Client] Registering user: ${currentUsername}`);
                        window.socket.emit('register_user', currentUsername);
                    });

                    window.socket.on('disconnect', (reason) => { console.warn(`[Socket.IO Client] Disconnected. Reason: ${reason}`); });
                    window.socket.on('connect_error', (err) => { console.error(`[Socket.IO Client] Connection Error: ${err.message}`); });


                    // --- Обработчики событий от Сервера ---
                    window.socket.on('balance_updated', (newBalance) => {
                        console.log('[Socket.IO Client] Received event: balance_updated, Data:', newBalance);
                        const headerBalanceEl = document.getElementById('headerUserBalance');
                        const headerRoleEl = document.getElementById('headerUserRole');
                        if (headerBalanceEl && headerRoleEl && headerRoleEl.textContent === 'Tenant' && typeof newBalance === 'number') {
                            try { headerBalanceEl.textContent = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(newBalance); headerBalanceEl.style.display = 'inline'; } catch(e) { console.error("Error formatting balance:", e); headerBalanceEl.textContent = "Ошибка"; }
                        } else if (headerBalanceEl) { headerBalanceEl.style.display = 'none'; }
                    });

                    window.socket.on('avatar_updated', () => {
                        console.log('[Socket.IO Client] Received event: avatar_updated');
                        const headerAvatarEl = document.getElementById('headerUserAvatar');
                        if (headerAvatarEl) { headerAvatarEl.src = headerAvatarEl.src.split('?')[0] + '?t=' + Date.now(); }
                        const profileAvatarEl = document.querySelector('.profile-avatar'); if (profileAvatarEl && profileAvatarEl.src !== headerAvatarEl?.src) { profileAvatarEl.src = profileAvatarEl.src.split('?')[0] + '?t=' + Date.now(); }
                        const profileEditAvatarEl = document.querySelector('.current-avatar-display img'); if (profileEditAvatarEl && profileEditAvatarEl.src !== headerAvatarEl?.src) { profileEditAvatarEl.src = profileEditAvatarEl.src.split('?')[0] + '?t=' + Date.now(); }
                    });

                    window.socket.on('profile_data_updated', (data) => {
                         console.log('[Socket.IO Client] Received event: profile_data_updated, Data:', data);
                         const headerUserNameEl = document.getElementById('headerUserName');
                         const headerUserRoleEl = document.getElementById('headerUserRole');
                         const headerBalanceEl = document.getElementById('headerUserBalance');
                         const headerCompanyContainerEl = document.querySelector('.user-sub-info .user-company');
                         const headerCompanySpanEl = headerCompanyContainerEl ? headerCompanyContainerEl.querySelector('span') : null;
                         const addPropertyLink = document.querySelector('.main-nav-links a[href="/properties/add"]');
                         if (headerUserNameEl && data?.fullName) { headerUserNameEl.textContent = shortenFullName(data.fullName); }
                         if (headerUserRoleEl && data?.role) { headerUserRoleEl.textContent = data.role; if (headerBalanceEl) { headerBalanceEl.style.display = (data.role === 'Tenant') ? 'inline' : 'none'; } }
                         if (headerCompanyContainerEl) {
                             const shouldShowCompany = (data?.role === 'Owner' || data?.role === 'Staff') && data?.companyName;
                             headerCompanyContainerEl.style.display = shouldShowCompany ? 'inline-flex' : 'none';
                             if (shouldShowCompany) {
                                 if (headerCompanySpanEl) headerCompanySpanEl.textContent = shortenCompanyName(data.companyName);
                                 headerCompanyContainerEl.title = data.companyName;
                             }
                         }
                         if (addPropertyLink && typeof data?.role !== 'undefined' && typeof data?.companyProfileCompleted !== 'undefined') { // Проверка наличия полей
                             const canAddProperty = data.role === 'Admin' || (data.role === 'Owner' && data.companyProfileCompleted === true);
                             addPropertyLink.style.display = canAddProperty ? 'inline' : 'none';
                         }
                    });

                    window.socket.on('account_deleted', (data) => {
                        console.log('[Socket.IO Client] Received event: account_deleted, Data:', data);
                        if (socket && socket.connected) socket.disconnect();
                        alert(data?.message || 'Ваш аккаунт был удален администратором.');
                        const form = document.createElement('form'); form.method = 'POST'; form.action = '/logout'; document.body.appendChild(form); form.submit();
                    });

                    // ---- ОБНОВЛЕНИЕ СЧЕТЧИКА ЧАТОВ ----
                    window.socket.on('total_unread_update', (data) => {
                         console.log('[Socket.IO Client] Received event: total_unread_update, Data:', data);
                         if (typeof data.totalUnreadCount === 'number') {
                              if (typeof window.updateHeaderChatBadge === 'function') {
                                   window.updateHeaderChatBadge(data.totalUnreadCount);
                              } else { console.error("Function window.updateHeaderChatBadge is not defined!"); }
                         } else { console.warn('[Socket.IO Client] Invalid total_unread_update data:', data); }
                    });

                    // ---- УВЕДОМЛЕНИЯ (КОЛОКОЛЬЧИК) ----
                    window.socket.on('initial_notifications', (initialNotifications) => {
                        console.log(`[Socket.IO Client] Received event: initial_notifications, Count: ${initialNotifications?.length}`);
                        displayInitialNotifications(initialNotifications);
                    });
                    window.socket.on('new_notification', (data) => {
                         console.log(`[Socket.IO Client] Received event: new_notification, Data:`, data);
                         if (data && data.type && data.title && data.message) {
                              const allowHtml = data.allowHtml === true;
                              addNewNotificationToPanel({ ...data, id: generateUniqueId(), read: false, timestamp: Date.now() });
                              showToastNotification({ senderName: data.title, text: data.message, type: data.type, chatId: data.chatId, id: data.id || generateUniqueId() });
                         } else { console.warn('[Socket.IO Client] Invalid new_notification data:', data); }
                    });
                    window.socket.on('booking_confirmed', (data) => { const msg = `Ваша бронь (#${data.bookingId?.substring(0,6)}) для "<strong>${data.propertyTitle || '?'}</strong>" подтверждена.`; if (window.location.pathname !== '/bookings') { showToastNotification({ senderName: 'Бронь подтверждена', text: `Бронь для "${data.propertyTitle || '?'}" подтверждена.`, type: 'success', id: `bk-conf-${data.bookingId}` }); } addNewNotificationToPanel({type:'success', title:'Бронь подтверждена', message:msg, bookingId:data.bookingId, id: `bk-notif-conf-${data.bookingId}`}); });
                    window.socket.on('booking_rejected', (data) => { const r=data.reason?` Причина: ${data.reason}`:''; const msg = `Ваш запрос (#${data.bookingId?.substring(0,6)}) на "<strong>${data.propertyTitle || '?'}</strong>" отклонен.${r}`; if (window.location.pathname !== '/bookings') { showToastNotification({ senderName: 'Запрос отклонен', text: `Запрос на "${data.propertyTitle || '?'}" отклонен.${r}`, type: 'warning', id: `bk-rej-${data.bookingId}` }); } addNewNotificationToPanel({type:'warning', title:'Запрос отклонен', message:msg, bookingId:data.bookingId, id: `bk-notif-rej-${data.bookingId}`}); });
                    window.socket.on('booking_cancelled_by_owner', (data) => { const msg = `Ваша активная бронь (#${data.bookingId?.substring(0,6)}) для "<strong>${data.propertyTitle || '?'}</strong>" аннулирована администрацией. Средства возвращены.`; if (window.location.pathname !== '/bookings') { showToastNotification({ senderName: 'Бронь аннулирована', text: `Активная бронь для "${data.propertyTitle || '?'}" аннулирована.`, type: 'error', id: `bk-can-own-${data.bookingId}` }); } addNewNotificationToPanel({type:'error', title:'Бронь аннулирована', message:msg, bookingId:data.bookingId, id: `bk-notif-can-own-${data.bookingId}`}); });
                    window.socket.on('new_booking_pending', (data) => { const msg = `Запрос на бронь (#${data.bookingId?.substring(0,6)}) для "<strong>${data.propertyTitle || '?'}</strong>" от ${data.tenantName || '?'}.`; if (window.location.pathname !== '/rentals') { const pMsg = `📬 Новый запрос на бронь (#${data.bookingId?.substring(0,6)}) для "<strong>${data.propertyTitle || '?'}</strong>" от ${data.tenantName}. <a href="/rentals" style='color:inherit; font-weight:bold;'>К арендам</a>`; showToastNotification({ senderName: 'Новый запрос на бронь', text: pMsg, type: 'info', id: `bk-new-${data.bookingId}`, allowHtml: true }); } addNewNotificationToPanel({type:'info', title:'Новый запрос', message:msg, bookingId:data.bookingId, id: `bk-notif-new-${data.bookingId}`}); });
                    window.socket.on('pending_booking_cancelled', (data) => { const msg = `${data.tenantName || '?'} отменил запрос (#${data.bookingId?.substring(0,6)}) на "<strong>${data.propertyTitle || '?'}</strong>".`; if (window.location.pathname !== '/rentals') { showToastNotification({ senderName: 'Запрос отменен арендатором', text: `Запрос (#${data.bookingId?.substring(0,6)}) на "${data.propertyTitle || '?'}" отменен арендатором.`, type: 'warning', id: `bk-can-pend-${data.bookingId}` }); } addNewNotificationToPanel({type:'warning', title:'Запрос отменен', message:msg, bookingId:data.bookingId, id: `bk-notif-can-pend-${data.bookingId}`}); });
                    window.socket.on('active_booking_cancelled', (data) => { const msg = `${data.tenantName || '?'} отменил активную бронь (#${data.bookingId?.substring(0,6)}) для "<strong>${data.propertyTitle || '?'}</strong>".`; if (window.location.pathname !== '/rentals') { showToastNotification({ senderName: 'Активная бронь отменена', text: `Арендатор отменил активную бронь (#${data.bookingId?.substring(0,6)}) для "${data.propertyTitle || '?'}"`, type: 'error', id: `bk-can-act-${data.bookingId}` }); } addNewNotificationToPanel({type:'error', title:'Активная бронь отменена', message:msg, bookingId:data.bookingId, id: `bk-notif-can-act-${data.bookingId}`}); });
                    window.socket.on('booking_status_changed', (data) => { let t='Статус...',ty='info',m=`Статус брони (#${data.bookingId?.substring(0,6)}) для "<strong>${data.propertyTitle||'?'}</strong>" (${data.tenantName||'?'}) изменен на "<strong>${data.newStatus}</strong>"`; if(data.newStatus==='Активна'){ty='success';t='Подтверждена';}else if(data.newStatus==='Отклонена'){ty='warning';t='Отклонена';}else if(data.newStatus==='Аннулирована'){ty='error';t='Аннулирована';} if (data.changedBy) m+=` пользователем ${data.changedBy}.`; if (data.reason) m+=` Причина: ${data.reason}.`; if (!window.location.pathname.startsWith('/rentals')) {showToastNotification({senderName: t, text: m, type: ty, id:`bk-stat-${data.bookingId}`});} addNewNotificationToPanel({type: ty, title: t, message: m, bookingId: data.bookingId, id: `bk-notif-stat-${data.bookingId}`}); });

                } catch (e) {
                    console.error("[Header Script] Error setting up Socket.IO:", e);
                }
            } else {
                console.log("[Header Script] User not logged in, skipping Socket.IO initialization.");
            }

            // --- Инициализация логики AutoUpdater ---
            const modalOverlay = document.getElementById('updateModalOverlay');
            const modalContent = document.getElementById('updateModalContent');
            const modalTitle = document.getElementById('updateModalTitle');
            const modalMessage = document.getElementById('updateModalMessage');
            const progressContainer = document.getElementById('updateProgressContainer');
            const progressBar = document.getElementById('updateProgressBar');
            const restartButtonModal = document.getElementById('updateModalRestartButton');
            const closeButtonModal = document.getElementById('updateModalCloseButton');
            const errorDetails = document.getElementById('updateErrorDetails');
            let updateInfoGlobal = null;
            let updateListeners = {}; // Для хранения ссылок на функции-слушатели

            function setModalStatusClass(statusClass) { if (modalContent) { modalContent.className = 'modal-content'; modalContent.classList.add(`status-${statusClass}`); const colors = { info: '#5bc0de', available: '#f0ad4e', downloading: '#f0ad4e', ready: '#5cb85c', error: '#d9534f' }; modalContent.style.borderTopColor = colors[statusClass] || '#5bc0de'; } }
            function showUpdateModal(statusClass = 'info') { if (!modalOverlay || !modalContent) return; setModalStatusClass(statusClass); modalOverlay.style.display = 'flex'; requestAnimationFrame(() => { modalOverlay.classList.add('visible'); modalContent.style.opacity = '1'; modalContent.style.transform = 'none'; }); }
            function hideUpdateModal() { if (modalOverlay) { modalOverlay.classList.remove('visible'); modalContent.style.opacity = '0'; modalContent.style.transform = 'translateY(-20px)'; setTimeout(() => { modalOverlay.style.display = 'none'; if(progressBar) progressBar.style.width = '0%'; if(progressContainer) progressContainer.style.display = 'none'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) closeButtonModal.style.display = 'none'; if(errorDetails) errorDetails.style.display = 'none'; }, 300); } }

            if (window.electronUpdater) {
                 console.log('[Renderer Updater] API found. Setting up listeners.');
                 if(closeButtonModal) closeButtonModal.onclick = hideUpdateModal;
                 if(restartButtonModal) restartButtonModal.onclick = () => { console.log('[Renderer Updater] Restart button clicked.'); restartButtonModal.textContent = 'Перезапуск...'; restartButtonModal.disabled = true; if (closeButtonModal) closeButtonModal.disabled = true; window.electronUpdater.send('install-update'); };

                 const handleStatus = (message) => { console.log('[Renderer Updater] Status:', message); if (!message && modalMessage && modalMessage.textContent === 'Установлена последняя версия.') { hideUpdateModal(); return; } const readyMessagePattern = /Версия .* загружена\. Готово к установке\./; if (typeof message === 'string' && !readyMessagePattern.test(message)) { if(modalMessage) modalMessage.textContent = message; if(modalTitle) modalTitle.textContent = 'Статус обновления'; if(progressContainer) progressContainer.style.display = 'none'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } if(errorDetails) errorDetails.style.display = 'none'; showUpdateModal('info'); } if (message === 'Установлена последняя версия.') { setTimeout(hideUpdateModal, 4000); } };
                 const handleError = (message) => { console.error('[Renderer Updater] Error:', message); if(modalTitle) modalTitle.textContent = 'Ошибка обновления'; if(modalMessage) modalMessage.textContent = 'Не удалось проверить или загрузить обновление.'; if(errorDetails) { errorDetails.textContent = `Детали: ${message}`; errorDetails.style.display = 'block'; } if(progressContainer) progressContainer.style.display = 'none'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } showUpdateModal('error'); };
                 const handleAvailable = (info) => { console.log('[Renderer Updater] Update available:', info); updateInfoGlobal = info; if(modalTitle) modalTitle.textContent = `Доступна версия ${info.version}`; if(modalMessage) modalMessage.textContent = 'Начинается автоматическая загрузка...'; if(progressBar) progressBar.style.width = '0%'; if(progressContainer) progressContainer.style.display = 'block'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } if(errorDetails) errorDetails.style.display = 'none'; showUpdateModal('available'); };
                 const handleProgress = (percent) => { const roundedPercent = Math.round(percent); if (roundedPercent % 5 === 0 || percent > 98 || percent < 2) { console.log('[Renderer Updater] Progress:', percent); } if(modalTitle) modalTitle.textContent = 'Загрузка обновления'; if(modalMessage) modalMessage.textContent = `Пожалуйста, подождите... ${roundedPercent}%`; if(progressBar) progressBar.style.width = `${percent}%`; if(progressContainer) progressContainer.style.display = 'block'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } if(errorDetails) errorDetails.style.display = 'none'; showUpdateModal('downloading'); };
                 const handleReady = (info) => { console.log('%c[Renderer Updater] Update ready!', 'color: green; font-weight: bold;', info); updateInfoGlobal = info; if(modalTitle) modalTitle.textContent = `Обновление ${info.version} готово!`; if(modalMessage) modalMessage.textContent = 'Нажмите кнопку ниже, чтобы перезапустить приложение и установить обновление.'; if(progressContainer) progressContainer.style.display = 'none'; if(errorDetails) errorDetails.style.display = 'none'; if(restartButtonModal) { restartButtonModal.textContent = 'Перезапустить и установить'; restartButtonModal.disabled = false; restartButtonModal.style.display = 'inline-block'; } if(closeButtonModal) { closeButtonModal.style.display = 'none'; } showUpdateModal('ready'); };

                 // Добавляем слушатели и сохраняем функции для удаления (на всякий случай)
                 updateListeners['update-status'] = window.electronUpdater.on('update-status', handleStatus);
                 updateListeners['update-error'] = window.electronUpdater.on('update-error', handleError);
                 updateListeners['update-available'] = window.electronUpdater.on('update-available', handleAvailable);
                 updateListeners['update-progress'] = window.electronUpdater.on('update-progress', handleProgress);
                 updateListeners['update-ready'] = window.electronUpdater.on('update-ready', handleReady);
            } else { console.warn('[Renderer Updater] API "electronUpdater" not found. Auto-update UI disabled.'); }
             // --- Конец логики AutoUpdater ---

             // --- Логика мобильного меню ---
             const mobileToggle = document.querySelector('.mobile-nav-toggle');
             const navLinks = document.querySelector('.main-nav-links');
             if(mobileToggle && navLinks) { mobileToggle.addEventListener('click', function() { navLinks.classList.toggle('open'); mobileToggle.classList.toggle('active'); }); }
             // --- Конец мобильного меню ---

             // --- Сокращение имени и компании в шапке ---
             const userNameElement = document.getElementById('headerUserName');
             const companyElement = document.querySelector('.user-sub-info .user-company span');
             function shortenFullName(fullName) { if (!fullName) return ''; const nameParts = fullName.trim().split(' '); if (nameParts.length < 2) return fullName; const lastName = nameParts[0]; const initials = nameParts.slice(1).map(part => part[0] + '.').join(' '); return `${lastName} ${initials}`; }
             function shortenCompanyName(companyName, maxLength = 15) { if (!companyName || companyName.length <= maxLength) return companyName; return companyName.substring(0, maxLength - 1) + '…'; }
             if (userNameElement && userNameElement.textContent) { userNameElement.textContent = shortenFullName(userNameElement.textContent); }
             if (companyElement && companyElement.textContent) { companyElement.textContent = shortenCompanyName(companyElement.textContent); }

        }); // --- Конец DOMContentLoaded ---
    })(); // --- Конец IIFE ---
</script>