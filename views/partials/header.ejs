<!-- views/partials/header.ejs -->
<header class="main-header" data-current-user="<%= (typeof currentUser !== 'undefined' && currentUser && currentUser.username) ? currentUser.username : '' %>">
    <nav class="header-content">
        <a href="/" class="brand-logo">
            <img src="/images/logo.svg" alt="Real Estate Logo" class="logo-img">
            <span>RealEstate</span>
        </a>

        <div class="header-right">
            <div class="nav-links main-nav-links">
                <%# Общие ссылки %>
                <a href="/properties" class="nav-link">Объекты</a>

                <%# Ссылки для авторизованных пользователей %>
                <% if (typeof currentUser !== 'undefined' && currentUser) { %>
                    <%# Для Арендатора %>
                    <% if (currentUser.role === 'Tenant') { %>
                        <a href="/bookings" class="nav-link">
                            <i class="fas fa-calendar-check"></i>
                            <span>Мои бронирования</span>
                        </a>
                        <a href="/chats" class="nav-link">
                            <i class="fas fa-comments"></i>
                            <span>Мои чаты</span>
                            <%# Бейдж для ТЕКУЩЕГО пользователя (Tenant) %>
                            <span class="unread-chats-badge" id="header-chat-badge" style="<%= locals.totalUnreadChatCount > 0 ? 'display: inline-block;' : 'display: none;' %>">
                                <%= locals.totalUnreadChatCount > 9 ? '9+' : locals.totalUnreadChatCount %>
                            </span>
                        </a>
                    <% } %>
                    <%# Управление Арендами (для всех кроме Tenant) %>
                    <% if (currentUser.role === 'Admin' || currentUser.role === 'Owner' || currentUser.role === 'Staff') { %>
                        <a href="/rentals" class="nav-link">
                            <i class="fas fa-tasks"></i>
                            <span>Упр. Арендами</span>
                        </a>
                    <% } %>
                    <%# Чаты для Owner/Staff %>
                    <% if ((currentUser.role === 'Owner' || currentUser.role === 'Staff') && currentUser.companyId) { %>
                        <a href="/chats" class="nav-link">
                            <i class="fas fa-headset"></i>
                            <span>Чаты компании</span>
                            <%# Бейдж для ТЕКУЩЕГО пользователя (Owner/Staff) %>
                            <span class="unread-chats-badge" id="header-chat-badge" style="<%= locals.totalUnreadChatCount > 0 ? 'display: inline-block;' : 'display: none;' %>">
                                <%= locals.totalUnreadChatCount > 9 ? '9+' : locals.totalUnreadChatCount %>
                            </span>
                        </a>
                     <% } %>
                    <%# Добавить объект (для Admin и Owner с завершенным профилем) %>
                    <% if (currentUser.role === 'Admin' || (currentUser.role === 'Owner' && currentUser.companyProfileCompleted)) { %>
                         <a href="/properties/add" class="nav-link">
                             <i class="fas fa-plus-circle"></i>
                             <span>Добавить объект</span>
                         </a>
                    <% } %>
                    <%# Управление компанией (для Owner и Staff с привязанным companyId) %>
                    <% if ((currentUser.role === 'Owner' || currentUser.role === 'Staff') && currentUser.companyId) { %>
                          <a href="/company/manage" class="nav-link">
                              <i class="fas fa-building"></i>
                              <span>Моя Компания</span>
                          </a>
                     <% } %>
                    <%# Управление пользователями (только для Admin) %>
                    <% if (currentUser.role === 'Admin') { %>
                        <a href="/users" class="nav-link">
                            <i class="fas fa-users-cog"></i>
                            <span>Пользователи</span>
                        </a>
                    <% } %>

                    <%# Управление компаниями (только для Admin) %>
                    <% if (currentUser.role === 'Admin') { %>
                        <a href="/admin/companies" class="nav-link">
                            <i class="fas fa-landmark"></i>
                            <span>Компании (Админ)</span>
                        </a>
                    <% } %>
                <% } else { %>
                    <%# Ссылки для неавторизованных %>
                    <a href="/login" class="nav-link auth-link">
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Войти</span>
                    </a>
                    <a href="/register" class="nav-link auth-link register-btn">
                        <i class="fas fa-user-plus"></i>
                        <span>Регистрация</span>
                    </a>
                <% } %>
            </div>

            <%# Блок профиля и уведомлений для авторизованных %>
            <% if (typeof currentUser !== 'undefined' && currentUser) { %>
                <div class="user-profile-wrapper">
                    <!-- === Кнопка Уведомлений (Колокольчик) === -->
                    <button id="notificationToggleBtn" type="button" title="Уведомления" class="notification-btn">
                        <i class="fas fa-bell"></i>
                        <span id="unreadCountBadgeHeader" class="notification-badge">0</span> <%# Изначально 0 %>
                    </button>
                    <!-- === Конец Кнопки Уведомлений === -->

                   <div class="user-profile">
                        <a href="/profile" class="profile-link" title="Профиль">
                            <div class="user-info">
                                <span class="user-name" id="headerUserName"><%= currentUser.fullName || currentUser.username %></span>
                                <div class="user-sub-info">
                                    <span class="user-role" id="headerUserRole"><%= currentUser.role %></span>
                                    <% if (currentUser.role === 'Tenant') { %>
                                        <span class="user-balance profile-sub-optional" id="headerUserBalance"><%= new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(currentUser.balance ?? 0) %></span>
                                    <% } else if ((currentUser.role === 'Owner' || currentUser.role === 'Staff') && currentUser.companyName) { %>
                                         <span class="user-company profile-sub-optional company-info-visible" title="<%= currentUser.companyName %>"><i class="fas fa-briefcase"></i> <span><%= currentUser.companyName.substring(0, 15) %><% if(currentUser.companyName.length > 15){ %>...<% } %></span></span>
                                    <% } %>
                                </div>
                            </div>
                            <div class="avatar-container" id="headerAvatarContainer">
                                <%
                                    let avatarSrc = '/images/placeholder-avatar.png';
                                    if (currentUser && currentUser.imageData && typeof currentUser.imageData === 'string') {
                                        let imageType = currentUser.imageData.startsWith('/9j/')?'image/jpeg':'image/png';
                                        avatarSrc = `data:${imageType};base64,${currentUser.imageData}`;
                                    }
                                %>
                                <img src="<%= avatarSrc %>" alt="Avatar" class="user-avatar" id="headerUserAvatar">
                            </div>
                        </a>
                        <form action="/logout" method="POST" class="logout-form">
                            <button type="submit" class="btn btn-logout" title="Выйти">
                                <i class="fas fa-sign-out-alt"></i>
                            </button>
                        </form>
                    </div>

                    <!-- === Глобальная Панель Уведомлений (ВНУТРИ WRAPPER) === -->
                    <div class="notification-panel global-notification-panel" id="globalNotificationPanel">
                        <div class="notification-header">
                            <h3><i class="fas fa-bell"></i> Уведомления</h3>
                            <button id="globalClearNotificationsBtn" class="btn btn-link btn-small" title="Очистить все">Очистить</button>
                        </div>
                        <div class="notification-list-container" id="globalNotificationListContainer">
                            <ul class="notification-list" id="globalNotificationList">
                                <li class="no-notifications">Нет новых уведомлений</li>
                            </ul>
                        </div>
                    </div>
                    <!-- === Конец Глобальной Панели Уведомлений === -->
                </div>
             <% } %>
        </div>
        <%# Кнопка мобильного меню (если нужна) %>
        <!--
        <button class="mobile-nav-toggle" aria-label="Открыть меню">
            <span class="hamburger-line"></span>
            <span class="hamburger-line"></span>
            <span class="hamburger-line"></span>
        </button>
        -->
    </nav>

    <div class="header-controls">
        <button id="closeAppBtn" title="Закрыть приложение">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="1em" height="1em" fill="currentColor">
                <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
            </svg>
        </button>
    </div>

    <!-- ===== Модальное окно обновления (остается как было) ===== -->
    <div id="updateModalOverlay" style="display: none;">
         <div id="updateModalContent" class="">
            <h2 id="updateModalTitle">Обновление Приложения</h2>
            <p id="updateModalMessage">Проверяем наличие обновлений...</p>
            <div id="updateProgressContainer">
                <div id="updateProgressBar"></div>
            </div>
            <div id="updateModalActions">
                 <button id="updateModalRestartButton" class="btn btn-primary">Перезапустить и установить</button>
                 <button id="updateModalCloseButton" class="btn btn-secondary">Закрыть</button>
            </div>
             <small id="updateErrorDetails"></small>
        </div>
    </div>
    <!-- ===== Контейнер для Всплывающих Уведомлений ===== -->
    <div id="toast-notification-container"></div>
    <!-- ============================================================= -->
</header>

<style>
/* ===== ОСНОВНЫЕ СТИЛИ ХЕДЕРА ===== */
.main-header {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    transition: all 0.3s ease;
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.7rem 1.5rem;
    max-width: 1400px;
    margin: 0 auto;
}

/* Логотип */
.brand-logo {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: rgb(0, 0, 0);
    font-weight: 700;
    font-size: 1.5rem;
    transition: all 0.2s ease;
}

.brand-logo:hover {
    transform: translateY(-1px);
}

.logo-img {
    height: 35px;
    margin-right: 0.6rem;
}

/* Правая часть хедера */
.header-right {
    display: flex;
    align-items: center;
    gap: 1.2rem;
}

/* Навигационные ссылки */
.nav-links {
    display: flex;
    gap: 0.8rem;
    align-items: center;
}

.nav-link {
    display: flex;
    align-items: center;
    padding: 0.5rem 0.8rem;
    color: #4b5563;
    text-decoration: none;
    font-weight: 500;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    gap: 0.4rem;
}

.nav-link i {
    font-size: 0.95rem;
    opacity: 0.8;
}

.nav-link:hover {
    color: #2563eb;
    background-color: rgba(37, 99, 235, 0.08);
}

/* Авторизационные ссылки */
.auth-link {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    border-radius: 0.5rem;
    border: 1px solid transparent;
}

.auth-link.register-btn {
    background-color: #2563eb;
    color: white;
    border: 1px solid #2563eb;
}

.auth-link.register-btn:hover {
    background-color: #1d4ed8;
    color: white;
}

/* Блок профиля пользователя */
.user-profile-wrapper {
    display: flex;
    align-items: center;
    position: relative;
    gap: 1rem;
}

.notification-btn {
    background: none;
    border: none;
    font-size: 1.2rem;
    color: #64748b;
    cursor: pointer;
    padding: 0.5rem;
    position: relative;
    border-radius: 50%;
    transition: all 0.2s ease;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.notification-btn:hover {
    background-color: rgba(0, 0, 0, 0.05);
    color: #2563eb;
}

.notification-badge {
    position: absolute;
    top: 2px;
    right: 2px;
    background-color: #dc3545;
    color: white;
    font-size: 0.65rem;
    padding: 1px 4px;
    border-radius: 50%;
    min-width: 15px;
    height: 15px;
    line-height: 13px;
    text-align: center;
    font-weight: bold;
    display: none;
}

.user-profile {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    border-radius: 0.6rem;
    padding: 0.3rem 0.5rem; /* Уменьшенный padding для контроля высоты */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.06);
    transition: all 0.3s ease;
    max-height: 50px; /* Ограничение высоты */
    overflow: hidden; /* Обрезаем переполнение */
}

.user-profile:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.profile-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: inherit;
    gap: 0.6rem; /* Уменьшенный gap */
    padding: 0;
}

.user-info {
    display: flex;
    flex-direction: column;
    max-width: 150px; /* Уменьшенный max-width */
    line-height: 1.2; /* Корректировка высоты текста */
}

.user-name {
    font-weight: 600;
    color: #1e293b;
    font-size: 0.9rem; /* Уменьшенный размер шрифта */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding-top: 2px; /* Небольшой отступ сверху */
}

.user-sub-info {
    display: flex;
    align-items: center;
    gap: 0.3rem; /* Уменьшенный gap */
    font-size: 0.7rem; /* Уменьшенный размер шрифта */
    color: #64748b;
    flex-wrap: wrap;
    max-height: 18px; /* Ограничение высоты */
    overflow: hidden; /* Обрезаем переполнение */
}

.user-role {
    background-color: rgba(37, 99, 235, 0.1);
    padding: 0.1rem 0.4rem;
    border-radius: 0.3rem;
    font-weight: 500;
    color: #2563eb;
}

.user-balance {
    font-weight: 500;
    color: #4b5563;
}

.user-company {
    display: flex;
    align-items: center;
    background-color: #f1f5f9; 
    padding: 0.1rem 0.4rem;
    border-radius: 0.3rem;
    font-size: 0.7rem;
    color: #4a5568;
    max-width: 120px; /* Ограничение ширины */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.company-info-visible {
    display: inline-flex;
}

.user-company i {
    font-size: 0.8em;
    margin-right: 2px;
    opacity: 0.7;
}

.avatar-container {
    width: 38px;
    height: 38px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid rgba(37, 99, 235, 0.2);
    transition: all 0.3s ease;
}

.avatar-container:hover {
    border-color: rgba(37, 99, 235, 0.5);
}

.user-avatar {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.btn-logout {
    background: none;
    border: none;
    color: #64748b;
    cursor: pointer;
    font-size: 1.1rem;
    padding: 0.4rem;
    border-radius: 50%;
    transition: all 0.2s ease;
    margin-left: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-logout:hover {
    color: #ef4444;
    background-color: rgba(239, 68, 68, 0.1);
}

/* Мобильное меню */
.mobile-nav-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    flex-direction: column;
    justify-content: space-between;
    height: 20px;
    width: 26px;
    padding: 0;
}

.hamburger-line {
    display: block;
    height: 2px;
    width: 100%;
    background-color: #4b5563;
    border-radius: 2px;
    transition: all 0.3s ease;
}

/* Панель уведомлений */
.notification-panel {
    position: absolute;
    top: calc(100% + 10px);
    right: 0;
    width: 360px;
    background-color: white;
    border-radius: 0.6rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
    transition: all 0.3s ease;
    z-index: 1001;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.08);
}

.notification-panel.active {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.8rem 1.2rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
    background-color: #f8fafc;
}

.notification-header h3 {
    margin: 0;
    font-size: 0.95rem;
    font-weight: 600;
    color: #1e293b;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.notification-header h3 i {
    color: #2563eb;
}

.btn-small {
    font-size: 0.8rem;
    padding: 0.2rem 0.5rem;
    color: #64748b;
    text-decoration: none;
    border-radius: 0.3rem;
    transition: all 0.2s ease;
}

.btn-small:hover {
    color: #ef4444;
    background-color: rgba(239, 68, 68, 0.1);
}

.notification-list-container {
    max-height: calc(90vh - 200px);
    overflow-y: auto;
}

.notification-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

.notification-item {
    padding: 0.8rem 1.2rem;
    display: flex;
    align-items: flex-start;
    gap: 0.8rem;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    transition: all 0.2s ease;
    cursor: pointer;
}

.notification-item:hover {
    background-color: #f8fafc;
}

.notification-item.unread {
    background-color: rgba(37, 99, 235, 0.05);
}

.notification-item .icon {
    color: #64748b;
    font-size: 1.1rem;
    margin-top: 0.2rem;
}

.notification-item.success .icon {
    color: #10b981;
}

.notification-item.warning .icon {
    color: #f59e0b;
}

.notification-item.error .icon {
    color: #ef4444;
}

.notification-item.info .icon {
    color: #3b82f6;
}

.notification-item .content {
    flex: 1;
}

.notification-item .title {
    font-weight: 600;
    color: #1e293b;
    font-size: 0.9rem;
    margin-bottom: 0.2rem;
    display: block;
}

.notification-item .message {
    color: #4b5563;
    font-size: 0.85rem;
    line-height: 1.4;
}

.notification-item .timestamp {
    color: #94a3b8;
    font-size: 0.75rem;
    margin-top: 0.3rem;
}

.notification-item .close-btn {
    background: none;
    border: none;
    color: #94a3b8;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.2rem;
    line-height: 1;
    border-radius: 50%;
    transition: all 0.2s ease;
    margin-left: 0.5rem;
}

.notification-item .close-btn:hover {
    color: #ef4444;
    background-color: rgba(239, 68, 68, 0.1);
}

.no-notifications {
    padding: 2rem 0;
    text-align: center;
    color: #94a3b8;
    font-size: 0.9rem;
    font-style: italic;
}

/* Модальное окно обновления */
#updateModalOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 1050;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

#updateModalContent {
    background-color: #fff;
    padding: 30px 40px;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
    width: 90%;
    max-width: 550px;
    text-align: center;
    border-top: 5px solid #5bc0de;
    transform: translateY(-20px);
    transition: transform 0.3s ease, opacity 0.3s ease;
    opacity: 0;
}

#updateModalTitle {
    margin-top: 0;
    margin-bottom: 15px;
    color: #2c3e50;
    font-size: 1.7rem;
    font-weight: 600;
}

#updateModalMessage {
    color: #555;
    margin-bottom: 25px;
    line-height: 1.6;
    font-size: 1.05rem;
}

#updateProgressContainer {
    display: none;
    margin-bottom: 25px;
    background-color: #e9ecef;
    border-radius: 5px;
    overflow: hidden;
    height: 12px;
    border: 1px solid #dee2e6;
}

#updateProgressBar {
    width: 0%;
    height: 100%;
    background-color: #5cb85c;
    background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem;
    border-radius: 4px;
    transition: width 0.2s linear;
    animation: progress-bar-stripes 1s linear infinite;
}

#updateModalRestartButton {
    display: none;
    padding: 12px 30px;
    font-size: 1rem;
    margin: 5px;
    min-width: 150px;
    background-color: #2563eb;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

#updateModalRestartButton:hover {
    background-color: #1d4ed8;
}

#updateModalCloseButton {
    display: none;
    padding: 12px 20px;
    font-size: 1rem;
    margin: 5px;
    background-color: #e2e8f0;
    color: #334155;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

#updateModalCloseButton:hover {
    background-color: #cbd5e1;
}

#updateErrorDetails {
    display: none;
    color: #dc3545;
    margin-top: 15px;
    font-size: 0.9em;
    line-height: 1.5;
    word-wrap: break-word;
}

@keyframes progress-bar-stripes {
    from { background-position: 1rem 0; }
    to { background-position: 0 0; }
}

/* Медиа-запросы для адаптивности */
@media (max-width: 1024px) {
    .user-info {
        max-width: 120px; /* Уменьшенный max-width для адаптивности */
    }
}

@media (max-width: 900px) {
    .main-nav-links a span {
        display: none;
    }
    
    .main-nav-links a i {
        font-size: 1.1rem;
        margin: 0;
    }
    
    .nav-link {
        padding: 0.5rem;
        justify-content: center;
        width: 36px;
        height: 36px;
    }
}

@media (max-width: 768px) {
    .header-content {
        padding: 0.5rem 1rem;
    }
    
    .brand-logo {
        font-size: 1.2rem;
    }
    
    .logo-img {
        height: 28px;
    }
    
    .header-right {
        gap: 0.6rem;
    }
    
    .nav-links {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: white;
        flex-direction: column;
        padding: 0.8rem 0;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }
    
    .nav-links.open {
        display: flex;
    }
    
    .nav-link {
        width: 100%;
        justify-content: flex-start;
        padding: 0.8rem 1.5rem;
        border-radius: 0;
    }
    
    .nav-link span {
        display: inline;
    }
    
    .mobile-nav-toggle {
        display: flex;
    }
    
    .avatar-container {
        width: 36px;
        height: 36px;
    }
    
    .user-name {
        font-size: 0.85rem;
    }
    
    .user-sub-info {
        font-size: 0.7rem;
    }
    
    .notification-panel {
        width: 300px;
        right: -70px;
    }
}

@media (max-width: 480px) {
    .user-info {
        display: none;
    }
    
    .notification-panel {
        width: 100%;
        right: 0;
        left: 0;
        transform: translateY(-20px);
    }
    
    .notification-badge {
        top: 0;
        right: 0;
    }
}

/* Стили для кнопки закрытия приложения */
.btn-close-app {
    background-color: transparent;
    color: #6c757d; /* Цвет иконки по умолчанию - должен быть виден */
    border: none; /* Убираем границу, чтобы не мешала */
    padding: 0.5rem 0.9rem; /* Паддинг можно настроить для размера */
    border-radius: 0.375rem;
    transition: all 0.2s ease-in-out;
    font-size: 1.2rem; /* Размер иконки крестика */
    line-height: 1; /* Для лучшего вертикального выравнивания иконки */
    cursor: pointer;
    margin-left: 1rem; /* Отступ слева от других элементов */
}

.btn-close-app i {
    display: block; /* Убирает лишнее пространство под иконкой если есть */
}

.btn-close-app:hover,
.btn-close-app:focus {
    color: #fff;
    background-color: #dc3545; /* Красный цвет при наведении */
    border-color: #dc3545;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    transform: translateY(-1px) scale(1.05);
}

.btn-close-app:active {
    transform: translateY(0) scale(1);
    background-color: #c82333;
    border-color: #bd2130;
}

/* Контейнер для кнопок управления окном Electron */
.header-controls {
    position: absolute !important; /* Абсолютное позиционирование */
    top: 0px !important;          /* Отступ сверху */
    right: 0px !important;         /* Отступ справа */
    height: 100%; /* Высота как у хедера */
    display: flex !important;
    align-items: center !important; /* Вертикальное выравнивание по центру */
    padding-right: 10px !important; /* Небольшой отступ справа для самой кнопки */
    z-index: 2000 !important;       /* Очень высокий z-index */
}

#closeAppBtn {
    background: transparent !important;
    border: none !important;
    color: #555555 !important; /* Явный цвет для SVG (fill="currentColor" будет использовать это) */
    font-size: inherit; /* У SVG свой размер через width/height атрибуты, но можно повлиять на line-height контейнера */
    width: 38px !important; /* Явная ширина для кликабельной области */
    height: 100% !important; /* Высота как у родителя .header-controls */
    padding: 0 !important; /* Убираем внутренние отступы, т.к. SVG сам задает размер */
    cursor: pointer !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

#closeAppBtn svg {
    width: 16px !important; /* Размер самого SVG */
    height: 16px !important;
    display: block !important; /* или inline-block, чтобы SVG был виден */
}

/* Убираем специфичные стили для i.fas.fa-times, они больше не нужны */

#closeAppBtn:hover {
    background-color: rgba(220, 53, 69, 0.1) !important;
    color: #dc3545 !important; /* Иконка SVG окрасится в этот цвет */
}

#closeAppBtn:active {
    background-color: rgba(220, 53, 69, 0.2) !important;
}

.btn-electron-control {
    background-color: transparent;
    border: none;
    color: #333; /* Темный цвет для видимости по умолчанию */
    padding: 8px 12px;
    font-size: 16px; /* Размер иконки */
    line-height: 1;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
}

.btn-electron-control i {
    display: inline-block; /* Убедимся, что иконка отображается */
    vertical-align: middle;
}

.btn-electron-control:hover {
    background-color: #e6e6e6; /* Светло-серый фон при наведении */
    color: #dc3545; /* Красный цвет иконки при наведении */
}

.btn-electron-control:active {
    background-color: #d4d4d4;
}
</style>
<!-- views/partials/header.ejs -->
<!-- ======================== ГЛОБАЛЬНЫЙ СКРИПТ ДЛЯ HEADER ======================== -->
<!-- Подключаем Socket.IO клиент -->
<script src="/socket.io/socket.io.js"></script>
<script>
    // --- Используем IIFE для изоляции ---
    (function() {
        console.log("[Header Script] Инициализация...");

        // --- Переменные и константы ---
        const MAX_GLOBAL_NOTIFICATIONS = 15; // Макс. уведомлений в колокольчике
        let isNotificationPanelOpen = false;
        let socket = null; // Сокет будет инициализирован ниже
        const currentUsername = document.querySelector('.main-header')?.dataset.currentUser || null; // Получаем из data-*
        // Переменные для элементов DOM
        const globalNotificationList = document.getElementById('globalNotificationList');
        const noNotificationsMsgElement = document.createElement('li'); // Создаем заранее
        noNotificationsMsgElement.className = 'no-notifications';
        noNotificationsMsgElement.style.cssText = "text-align: center; color: #95a5a6; padding: 15px; font-style: italic; font-size: 0.85rem;";
        noNotificationsMsgElement.textContent = 'Нет новых уведомлений';
        const notificationToggleButton = document.getElementById('notificationToggleBtn');
        const globalNotificationPanel = document.getElementById('globalNotificationPanel');
        const unreadNotificationBadgeHeader = document.getElementById('unreadCountBadgeHeader'); // Бейдж уведомлений (колокольчик)
        const unreadChatBadgeHeader = document.getElementById('header-chat-badge'); // Бейдж ЧАТОВ
        const globalClearNotificationsBtn = document.getElementById('globalClearNotificationsBtn');
        const toastContainer = document.getElementById('toast-notification-container');

        console.log("[Header Script] Current User:", currentUsername);
        console.log("[Header Script] Chat Badge Element:", !!unreadChatBadgeHeader);
        console.log("[Header Script] Notification Badge Element:", !!unreadNotificationBadgeHeader);

        // --- Глобальная функция обновления БЕЙДЖА ЧАТОВ ---
        window.updateHeaderChatBadge = function(count) {
            console.log('[Header] Обновление бейджа ЧАТОВ, count:', count);
            if (unreadChatBadgeHeader) {
                 const numCount = parseInt(count) || 0;
                 if (numCount > 0) {
                     unreadChatBadgeHeader.textContent = numCount > 9 ? '9+' : numCount;
                     unreadChatBadgeHeader.style.display = 'inline-block';
                     unreadChatBadgeHeader.classList.add('updated');
                     setTimeout(() => unreadChatBadgeHeader.classList.remove('updated'), 600);
                 } else {
                     unreadChatBadgeHeader.style.display = 'none';
                     unreadChatBadgeHeader.classList.remove('updated');
                 }
                 console.log(`[Header] Бейдж чатов обновлен. Текст: ${unreadChatBadgeHeader.textContent}, Видимость: ${unreadChatBadgeHeader.style.display}`);
            } else {
                 console.warn('[Header] Элемент бейджа чатов #header-chat-badge не найден.');
            }
        };

         // --- Глобальная функция обновления БЕЙДЖА УВЕДОМЛЕНИЙ (КОЛОКОЛЬЧИК) ---
        window.updateHeaderNotificationBadge = function(count) {
            console.log('[Header] Обновление бейджа УВЕДОМЛЕНИЙ, count:', count);
            if (unreadNotificationBadgeHeader) {
                 const numCount = parseInt(count) || 0;
                 if (numCount > 0) {
                     unreadNotificationBadgeHeader.textContent = numCount > 9 ? '9+' : numCount;
                     unreadNotificationBadgeHeader.style.display = 'inline-block';
                     unreadNotificationBadgeHeader.classList.add('updated');
                     setTimeout(() => unreadNotificationBadgeHeader.classList.remove('updated'), 600);
                 } else {
                     unreadNotificationBadgeHeader.style.display = 'none';
                     unreadNotificationBadgeHeader.classList.remove('updated');
                 }
                 console.log(`[Header] Бейдж уведомлений обновлен. Текст: ${unreadNotificationBadgeHeader.textContent}, Видимость: ${unreadNotificationBadgeHeader.style.display}`);
            } else {
                console.warn('[Header] Элемент бейджа уведомлений #unreadCountBadgeHeader не найден.');
            }
        };

        // --- Функции для всплывающих уведомлений (Toast) ---
        window.showToastNotification = function(data) {
             if (!toastContainer || !data) return;
             const toastId = `toast-${data.id || Date.now()}`;
             const existingToast = document.getElementById(toastId);
             if (existingToast) existingToast.remove();

             const toastDiv = document.createElement('div');
             toastDiv.className = `toast-notification ${data.type || 'info'}`;
             toastDiv.id = toastId;

             toastDiv.onclick = (e) => {
                  if (!e.target.closest('button') && data.chatId) {
                      window.location.href = `/chats/${data.chatId}`;
                      hideToast(toastDiv);
                  } else if (!e.target.closest('button') && data.bookingId && (data.type === 'booking' || data.type === 'info' || data.type === 'warning')) {
                      window.location.href = '/rentals';
                      hideToast(toastDiv);
                  }
             };

             let iconClass = 'fa-info-circle';
             let borderColor = 'var(--info-color, #17a2b8)';
             if (data.chatId && data.type !== 'error' && data.type !== 'warning') {
                iconClass = 'fa-comment-dots'; borderColor = 'var(--primary-color, #0d6efd)';
             } else if (data.type === 'error') { iconClass = 'fa-exclamation-circle'; borderColor = 'var(--danger-color, #dc3545)'; }
             else if (data.type === 'warning') { iconClass = 'fa-exclamation-triangle'; borderColor = 'var(--warning-color, #ffc107)'; }
             else if (data.type === 'success') { iconClass = 'fa-check-circle'; borderColor = 'var(--success-color, #198754)'; }
             else if (data.type === 'booking') { iconClass = 'fa-calendar-check'; borderColor = 'var(--primary-color, #0d6efd)';}

             toastDiv.style.borderLeftColor = borderColor;

             let messageContent = data.text || '';
             if(data.allowHtml !== true) {
                  const tempDiv = document.createElement('div');
                  tempDiv.textContent = messageContent;
                  messageContent = tempDiv.innerHTML;
             }

             toastDiv.innerHTML = `
                 <div class="toast-icon" style="color: ${borderColor};"><i class="fas ${iconClass}"></i></div>
                 <div class="toast-content">
                     <h5 class="toast-title">${data.senderName || 'Уведомление'}</h5>
                     <p class="toast-message">${messageContent}</p>
                     ${data.chatId ? `
                     <div class="toast-actions">
                         <button class="btn-toast-read" data-chat-id="${data.chatId}">Прочитано</button>
                         <button class="btn-toast-open" data-chat-id="${data.chatId}">Перейти</button>
                     </div>` : ''}
                 </div>
             `;

             if (data.chatId) {
                 const readButton = toastDiv.querySelector('.btn-toast-read');
                 const openButton = toastDiv.querySelector('.btn-toast-open');
                 if (readButton) readButton.addEventListener('click', (e) => { e.stopPropagation(); markChatAsRead(data.chatId); hideToast(toastDiv); });
                 if (openButton) openButton.addEventListener('click', (e) => { e.stopPropagation(); window.location.href = `/chats/${data.chatId}`; hideToast(toastDiv); });
             }

             toastContainer.prepend(toastDiv);
             requestAnimationFrame(() => { toastDiv.classList.add('show'); });

             // Воспроизведение звука уведомлений
             try {
                 let soundPath = null;
                 if (data.chatId && data.type !== 'error' && data.type !== 'warning') {
                     // Для сообщений чата
                     soundPath = '/sounds/new_message.mp3';
                     console.log('[Toast] Playing chat message sound.');
                 } else if (data.type !== 'error' && data.type !== 'warning' && !data.chatId) {
                     // Для остальных уведомлений (не чат, не ошибка, не предупреждение)
                     soundPath = '/sounds/notification.mp3';
                     console.log('[Toast] Playing general notification sound.');
                 }

                 if (soundPath) {
                     const audio = new Audio(soundPath);
                     audio.play().catch(e => console.warn(`Toast audio playback failed for ${soundPath}:`, e));
                 }
             } catch (e) {
                 console.error('[Toast] Error during sound playback attempt:', e);
             }

             setTimeout(() => { hideToast(toastDiv); }, 7000);
        }

        function hideToast(toastElement) {
             if (!toastElement || !toastElement.parentNode) return;
             toastElement.classList.remove('show');
             toastElement.classList.add('hide');
             setTimeout(() => { if (toastElement.parentNode) toastElement.parentNode.removeChild(toastElement); }, 500);
        }

        function markChatAsRead(chatId) {
             if (socket && chatId) {
                 socket.emit('mark_chat_read', chatId);
                 console.log(`[Header Script] Отправлено mark_chat_read для чата ${chatId} из toast`);
             } else { console.warn("[Header Script] Не могу пометить чат прочитанным: нет сокета или chatId."); }
        }

        // --- Функции для УВЕДОМЛЕНИЙ (Колокольчик) ---
        function createNotificationElement(notification) { /* ... (код без изменений) ... */
            const li = document.createElement('li');
            li.className = `notification-item ${notification.type || 'info'}`;
            if (notification.read !== true) { li.classList.add('unread'); }
            li.dataset.id = notification.id;
            li.dataset.bookingId = notification.bookingId || '';
            let iconClass = 'fa-info-circle';
            switch(notification.type) {
                case 'success': iconClass = 'fa-check-circle'; break;
                case 'warning': iconClass = 'fa-exclamation-triangle'; break;
                case 'error':   iconClass = 'fa-times-circle'; break;
                case 'info':    iconClass = 'fa-bell'; break;
                case 'booking': iconClass = 'fa-calendar-check'; break;
                case 'new_booking_pending': iconClass = 'fa-calendar-plus'; break;
                case 'pending_booking_cancelled': iconClass = 'fa-calendar-minus'; break;
                case 'active_booking_cancelled': iconClass = 'fa-calendar-times'; break;
            }
            let ts = notification.timestamp;
            let d = new Date();
             try { if (typeof ts === 'number') d = new Date(ts); else if (typeof ts === 'string') d = new Date(Date.parse(ts)); if (isNaN(d.getTime())) d = new Date(); }
             catch (e) { d = new Date(); }
            const timeString = d.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            const dateString = d.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
            let messageHtml = '';
            if (notification.allowHtml === true) { messageHtml = notification.message || ''; }
            else { const tempDiv = document.createElement('div'); tempDiv.textContent = notification.message || ''; messageHtml = tempDiv.innerHTML; }
            li.innerHTML = `
                <div class="icon"><i class="fas ${iconClass}"></i></div>
                <div class="content">
                    <span class="title">${notification.title || ''}</span>
                    <div class="message">${messageHtml}</div>
                    <div class="timestamp">${dateString} ${timeString}</div>
                </div>
                <button class="close-btn" title="Удалить уведомление">×</button>`;
            const closeBtn = li.querySelector('.close-btn');
            if (closeBtn) { closeBtn.addEventListener('click', function(event) { event.stopPropagation(); removeNotificationFromPanel(notification.id); }); }
            if (notification.bookingId) { li.addEventListener('click', () => { window.location.href = '/rentals'; toggleNotificationPanel(); }); li.style.cursor = 'pointer'; }
            return li;
        }
        function displayInitialNotifications(notifications) { /* ... (код без изменений) ... */
             if (!globalNotificationList || !Array.isArray(notifications)) { console.warn("Cannot display initial notifications: list container not found or data invalid."); return; }
             globalNotificationList.innerHTML = '';
             if (notifications.length === 0) { globalNotificationList.appendChild(noNotificationsMsgElement); }
             else { notifications.forEach(n => { if (n && n.id) globalNotificationList.appendChild(createNotificationElement(n)); }); }
             const unreadCount = notifications.filter(n => n && !n.read).length;
             window.updateHeaderNotificationBadge(unreadCount);
        }
        function addNewNotificationToPanel(notificationData) { /* ... (код без изменений) ... */
             if (!globalNotificationList) return;
             const placeholder = globalNotificationList.querySelector('.no-notifications');
             if(placeholder) placeholder.remove();
             if (notificationData && notificationData.id) {
                 const li = createNotificationElement(notificationData);
                 globalNotificationList.prepend(li);
                 while (globalNotificationList.children.length > MAX_GLOBAL_NOTIFICATIONS) { globalNotificationList.removeChild(globalNotificationList.lastElementChild); }
                 if (!isNotificationPanelOpen) {
                     const currentCount = parseInt(unreadNotificationBadgeHeader?.textContent || '0') || 0;
                     window.updateHeaderNotificationBadge(currentCount + 1);
                 } else {
                      const unreadCount = globalNotificationList.querySelectorAll('.notification-item.unread').length;
                      window.updateHeaderNotificationBadge(unreadCount);
                 }
             } else { console.warn("Attempted to add invalid notification data:", notificationData); }
        }
        function removeNotificationFromPanel(notificationId) { /* ... (код без изменений, использует сокет) ... */
             const item = globalNotificationList ? globalNotificationList.querySelector(`.notification-item[data-id="${notificationId}"]`) : null;
             if (!item) return;
             const wasUnread = item.classList.contains('unread');
             item.style.transition = 'opacity 0.3s ease, transform 0.3s ease'; item.style.opacity = 0; item.style.transform = 'translateX(20px)';
             setTimeout(() => {
                  if (item.parentNode) item.remove();
                  if (socket && notificationId && !notificationId.startsWith('_')) { socket.emit('delete_notification', notificationId); console.log(`[Notifications] Sent 'delete_notification' for ID: ${notificationId}`); }
                  else { console.warn("[Notifications] Cannot send delete event: socket or notificationId invalid."); }
                  const unreadCount = globalNotificationList ? globalNotificationList.querySelectorAll('.notification-item.unread').length : 0;
                  window.updateHeaderNotificationBadge(unreadCount);
                  if (globalNotificationList && globalNotificationList.children.length === 0) { globalNotificationList.appendChild(noNotificationsMsgElement); }
             }, 300);
        }
        function clearAllNotifications() { /* ... (код без изменений, использует сокет) ... */
             if (!confirm("Удалить все уведомления?")) return;
             if (globalNotificationList) { globalNotificationList.innerHTML = ''; globalNotificationList.appendChild(noNotificationsMsgElement); }
             if (socket) { socket.emit('clear_all_notifications'); console.log("[Notifications] Sent 'clear_all_notifications'"); }
             else { console.warn("[Notifications] Cannot send clear_all_notifications event: socket invalid."); }
             window.updateHeaderNotificationBadge(0);
        }
        function markAllVisibleNotificationsAsRead() { /* ... (код без изменений, использует сокет) ... */
             if (!globalNotificationList || !socket) return;
             const idsToMark = []; const items = globalNotificationList.querySelectorAll('.notification-item.unread');
             if (items.length === 0) return;
             items.forEach(item => { item.classList.remove('unread'); const id = item.dataset.id; if (id && !id.startsWith('_')) { idsToMark.push(id); } });
             if (idsToMark.length > 0) { socket.emit('mark_notifications_read', idsToMark); console.log(`[Notifications] Sent 'mark_notifications_read' for IDs:`, idsToMark); }
             window.updateHeaderNotificationBadge(0);
        }
        function toggleNotificationPanel() { /* ... (код без изменений) ... */
             if (!globalNotificationPanel) return;
             isNotificationPanelOpen = !globalNotificationPanel.classList.contains('active');
             globalNotificationPanel.classList.toggle('active', isNotificationPanelOpen);
             if (isNotificationPanelOpen) { markAllVisibleNotificationsAsRead(); }
        }
        function shortenFullName(fullName) { /* ... (код без изменений) ... */ if (!fullName) return ''; const nameParts = fullName.trim().split(' '); if (nameParts.length < 2) return fullName; const lastName = nameParts[0]; const initials = nameParts.slice(1).map(part => part[0] + '.').join(' '); return `${lastName} ${initials}`; }
        function shortenCompanyName(companyName, maxLength = 15) { /* ... (код без изменений) ... */ if (!companyName || companyName.length <= maxLength) return companyName; return companyName.substring(0, maxLength - 1) + '…'; }

        // --- Основной Запуск Скрипта ---
        document.addEventListener('DOMContentLoaded', () => {
            console.log("[Header Script] DOMContentLoaded fired.");
            // --- Инициализация DOM элементов ---
            if (globalNotificationList && globalNotificationList.children.length === 0 && !globalNotificationList.querySelector('.no-notifications')) {
                 globalNotificationList.appendChild(noNotificationsMsgElement);
            }
            // --- Привязка обработчиков событий ---
            if (notificationToggleButton) { notificationToggleButton.addEventListener('click', (event) => { event.stopPropagation(); toggleNotificationPanel(); }); }
            if (globalClearNotificationsBtn) { globalClearNotificationsBtn.addEventListener('click', clearAllNotifications); }
            document.addEventListener('click', (event) => { if (isNotificationPanelOpen && globalNotificationPanel && notificationToggleButton && !globalNotificationPanel.contains(event.target) && event.target !== notificationToggleButton && !notificationToggleButton.contains(event.target)) { toggleNotificationPanel(); } });

            // --- Инициализация Socket.IO ---
            if (currentUsername) {
                try {
                    console.log('[Header Script] Попытка инициализации Socket.IO...');
                    window.socket = io({ reconnectionAttempts: 5, reconnectionDelay: 3000, transports: ['websocket', 'polling'] });
                    socket = window.socket;

                    socket.on('connect', () => { console.log('[Socket.IO Client] Подключено! ID:', socket.id); console.log(`[Socket.IO Client] Регистрация: ${currentUsername}`); socket.emit('register_user', currentUsername); socket.emit('get_initial_unread_counts'); console.log("[Socket.IO Client] Запрошены начальные счетчики."); });
                    socket.on('disconnect', (reason) => { console.warn(`[Socket.IO Client] Отключено. Причина: ${reason}`); });
                    socket.on('connect_error', (err) => { console.error(`[Socket.IO Client] Ошибка подключения: ${err.message}`, err); });

                    // === Глобальные Обработчики Событий Socket.IO ===

                    // 1. Обновление общего счетчика НЕПРОЧИТАННЫХ ЧАТОВ
                    socket.on('total_unread_update', (data) => {
                         console.log('[Socket.IO Client] Получено: total_unread_update, Data:', data);
                         if (typeof data.totalUnreadCount === 'number') { window.updateHeaderChatBadge(data.totalUnreadCount); }
                         else { console.warn('[Socket.IO Client] Невалидные данные в total_unread_update:', data); }
                    });

                    // 2. Новое сообщение
                    socket.on('new_message', (data) => {
                        console.log('[Socket.IO Client] Получено: new_message, Data:', data);
                        // Всегда вызываем обработчик из chat.js (если он есть), он сам разберется, что делать
                        if (typeof window.handleIncomingMessage === 'function') {
                            window.handleIncomingMessage(data);
                        } else { console.warn("[Header Script] Функция window.handleIncomingMessage не найдена."); }

                        // Показываем всплывающий Toast, если чат НЕ открыт И сообщение НЕ от нас
                        // Определяем ID открытого чата (может быть null)
                        const currentOpenChatId = (typeof window.currentChatId === 'string' || typeof window.currentChatId === 'number') ? window.currentChatId : null;
                        console.log(`[Header new_message] currentOpenChatId: ${currentOpenChatId}, incoming chatId: ${data?.chatId}, senderId: ${data?.message?.senderId}`);
                        // Проверяем, что сообщение существует и senderId не равен текущему пользователю
                        if (data && data.chatId && data.message && data.message.senderId !== currentUsername) {
                            // Показываем toast, если ID чата не совпадает с открытым
                            if (data.chatId !== currentOpenChatId) {
                                 console.log(`[Header new_message] Показываем Toast для чата ${data.chatId}`);
                                 showToastNotification({
                                     id: data.message.id || Date.now(), // Используем ID сообщения или timestamp
                                     chatId: data.chatId,
                                     senderName: data.message.senderName || 'Новое сообщение',
                                     text: data.message.text || '',
                                     type: 'info' // Или другой тип для сообщений
                                 });
                            } else {
                                console.log(`[Header new_message] Toast не показан, т.к. чат ${data.chatId} открыт.`);
                            }
                        } else if (data?.message?.senderId === currentUsername) {
                             console.log(`[Header new_message] Toast не показан, т.к. сообщение от текущего пользователя ${currentUsername}.`);
                        } else {
                            console.warn('[Header new_message] Toast не показан из-за неполных данных или другой причины.');
                        }
                    });


                    // 3. Прочтение сообщений другим пользователем (для галочек)
                    socket.on('messages_read_up_to', (data) => {
                         console.log('[Socket.IO Client] Получено: messages_read_up_to, Data:', data);
                         if (typeof window.handleMessagesRead === 'function') { window.handleMessagesRead(data); }
                         else { console.warn("[Header Script] Функция window.handleMessagesRead не найдена."); }
                    });

                    // 4. Обновление счетчика КОНКРЕТНОГО чата (в сайдбаре)
                    socket.on('chat_list_unread_update', (data) => {
                        // Этот обработчик находится в chat.js и должен использовать window.socket
                        // Продублируем базовый лог здесь для отладки
                         console.log('[Socket.IO Client] Получено: chat_list_unread_update, Data:', data);
                         // Основная логика обновления UI списка чатов - в chat.js
                    });

                    // 5. События для УВЕДОМЛЕНИЙ (колокольчик)
                    socket.on('initial_notifications', (initialNotifications) => { console.log(`[Socket.IO Client] Получено: initial_notifications, Count: ${initialNotifications?.length}`); displayInitialNotifications(initialNotifications); });
                    socket.on('new_notification', (data) => { console.log(`[Socket.IO Client] Получено: new_notification, Data:`, data); if (data && data.type && data.title && data.message) { addNewNotificationToPanel({ ...data, id: data.id || ('_' + Math.random().toString(36).substring(2, 9)), read: false, timestamp: Date.now() }); } else { console.warn('[Socket.IO Client] Невалидные данные new_notification:', data); } });
                    socket.on('update_header_notification_badge', (data) => { console.log(`[Socket.IO Client] Получено: update_header_notification_badge, Count: ${data?.count}`); if (typeof data?.count === 'number') { window.updateHeaderNotificationBadge(data.count); } });

                    // --- Остальные события (баланс, профиль и т.д.) ---
                    socket.on('balance_updated', (newBalance) => { console.log('[Socket.IO] Balance updated:', newBalance); const el = document.getElementById('headerUserBalance'); if(el) { el.textContent = new Intl.NumberFormat('ru-RU',{style:'currency',currency:'RUB',maximumFractionDigits:0}).format(newBalance||0); el.classList.add('updated'); setTimeout(()=>el.classList.remove('updated'),600); } });
                    socket.on('avatar_updated', () => { console.log('[Socket.IO] Avatar updated.'); const el=document.getElementById('headerUserAvatar'); if(el) el.src = el.src.split('?')[0]+'?t='+Date.now(); });
                    socket.on('profile_data_updated', (data) => { console.log('[Socket.IO] Profile updated:', data); const nameEl=document.getElementById('headerUserName'); const roleEl=document.getElementById('headerUserRole'); const compEl=document.querySelector('.user-sub-info .user-company span'); if(nameEl && data.fullName) nameEl.textContent = shortenFullName(data.fullName); if(roleEl && data.role) roleEl.textContent=data.role; if(compEl && data.companyName) compEl.textContent = shortenCompanyName(data.companyName); /* ... */ });
                    socket.on('account_deleted', (data) => { console.log('[Socket.IO] Account deleted:', data); if (socket && socket.connected) socket.disconnect(); alert(data?.message || 'Ваш аккаунт удален.'); const f=document.createElement('form');f.method='POST';f.action='/logout';document.body.appendChild(f);f.submit(); });

                    // События бронирования
                     const bookingEventHandler = (eventName, data, toastTitle, toastType, notifTitle, notifType) => { console.log(`[Socket.IO] Received event: ${eventName}, Data:`, data); const messageForNotif = `Бронь (#${data.bookingId?.substring(0,6)}) для "${data.propertyTitle || '?'}"`; let fullMessage = messageForNotif; if (data.tenantName) fullMessage += ` (Арендатор: ${data.tenantName})`; if (data.changedBy) fullMessage += ` изменена ${data.changedBy}`; if (data.reason) fullMessage += `. Причина: ${data.reason}`; const toastMessage = `${toastTitle}: ${messageForNotif}${data.tenantName ? ' от '+data.tenantName : ''}${data.reason ? '. '+data.reason : '.'}`; if (!window.location.pathname.startsWith('/rentals')) { showToastNotification({ senderName: toastTitle, text: toastMessage, type: toastType, id: `${eventName}-${data.bookingId}`, bookingId: data.bookingId, allowHtml: true }); } addNewNotificationToPanel({type: notifType, title: notifTitle, message: fullMessage, bookingId: data.bookingId, id: `notif-${eventName}-${data.bookingId}` }); };
                     socket.on('booking_confirmed', (data) => bookingEventHandler('booking_confirmed', data, 'Бронь подтверждена', 'success', 'Подтверждено', 'success'));
                     socket.on('booking_rejected', (data) => bookingEventHandler('booking_rejected', data, 'Запрос отклонен', 'warning', 'Отклонено', 'warning'));
                     socket.on('booking_cancelled_by_owner', (data) => bookingEventHandler('booking_cancelled_by_owner', data, 'Бронь аннулирована', 'error', 'Аннулировано адм.', 'error'));
                     socket.on('new_booking_pending', (data) => bookingEventHandler('new_booking_pending', data, 'Новый запрос на бронь', 'info', 'Новый запрос', 'booking'));
                     socket.on('pending_booking_cancelled', (data) => bookingEventHandler('pending_booking_cancelled', data, 'Запрос отменен арендатором', 'warning', 'Отменен арендатором', 'warning'));
                     socket.on('active_booking_cancelled', (data) => bookingEventHandler('active_booking_cancelled', data, 'Активная бронь отменена', 'error', 'Отменено арендатором', 'error'));
                     socket.on('booking_status_changed', (data) => { let t=`Статус: ${data.newStatus}`,ty='info';if(data.newStatus==='Активна'){ty='success';}else if(data.newStatus==='Отклонена'){ty='warning';}else if(data.newStatus==='Аннулирована'){ty='error';} bookingEventHandler('booking_status_changed', data, t, ty, `Статус: ${data.newStatus}`, ty); });


                } catch (e) {
                    console.error("[Header Script] Ошибка инициализации Socket.IO:", e);
                }
            } else {
                console.log("[Header Script] Пользователь не авторизован, Socket.IO не инициализирован.");
            }

            // --- Инициализация логики AutoUpdater (остается без изменений) ---
            /* ... код AutoUpdater ... */
            const modalOverlay = document.getElementById('updateModalOverlay'); const modalContent = document.getElementById('updateModalContent'); const modalTitle = document.getElementById('updateModalTitle'); const modalMessage = document.getElementById('updateModalMessage'); const progressContainer = document.getElementById('updateProgressContainer'); const progressBar = document.getElementById('updateProgressBar'); const restartButtonModal = document.getElementById('updateModalRestartButton'); const closeButtonModal = document.getElementById('updateModalCloseButton'); const errorDetails = document.getElementById('updateErrorDetails'); let updateListeners = {};
            function setModalStatusClass(statusClass) { if (modalContent) { modalContent.className = 'modal-content'; modalContent.classList.add(`status-${statusClass}`); const colors = { info: '#5bc0de', available: '#f0ad4e', downloading: '#f0ad4e', ready: '#5cb85c', error: '#d9534f' }; modalContent.style.borderTopColor = colors[statusClass] || '#5bc0de'; } }
            function showUpdateModal(statusClass = 'info') { if (!modalOverlay || !modalContent) return; setModalStatusClass(statusClass); modalOverlay.style.display = 'flex'; requestAnimationFrame(() => { modalOverlay.classList.add('visible'); modalContent.style.opacity = '1'; modalContent.style.transform = 'none'; }); }
            function hideUpdateModal() { if (modalOverlay) { modalOverlay.classList.remove('visible'); modalContent.style.opacity = '0'; modalContent.style.transform = 'translateY(-20px)'; setTimeout(() => { modalOverlay.style.display = 'none'; if(progressBar) progressBar.style.width = '0%'; if(progressContainer) progressContainer.style.display = 'none'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) closeButtonModal.style.display = 'none'; if(errorDetails) errorDetails.style.display = 'none'; }, 300); } }
            if (window.electronUpdater) {
                 console.log('[Renderer Updater] API найдено. Настройка слушателей.');
                 if(closeButtonModal) closeButtonModal.onclick = hideUpdateModal;
                 if(restartButtonModal) restartButtonModal.onclick = () => { console.log('[Renderer Updater] Нажата кнопка перезапуска.'); restartButtonModal.textContent = 'Перезапуск...'; restartButtonModal.disabled = true; if (closeButtonModal) closeButtonModal.disabled = true; window.electronUpdater.send('install-update'); };
                 const handleStatus = (message) => { console.log('[Renderer Updater] Статус:', message); if (!message && modalMessage && modalMessage.textContent === 'Установлена последняя версия.') { hideUpdateModal(); return; } const readyMessagePattern = /Версия .* загружена\. Готово к установке\./; if (typeof message === 'string' && !readyMessagePattern.test(message)) { if(modalMessage) modalMessage.textContent = message; if(modalTitle) modalTitle.textContent = 'Статус обновления'; if(progressContainer) progressContainer.style.display = 'none'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } if(errorDetails) errorDetails.style.display = 'none'; showUpdateModal('info'); } if (message === 'Установлена последняя версия.') { setTimeout(hideUpdateModal, 4000); } };
                 const handleError = (message) => { console.error('[Renderer Updater] Ошибка:', message); if(modalTitle) modalTitle.textContent = 'Ошибка обновления'; if(modalMessage) modalMessage.textContent = 'Не удалось проверить или загрузить обновление.'; if(errorDetails) { errorDetails.textContent = `Детали: ${message}`; errorDetails.style.display = 'block'; } if(progressContainer) progressContainer.style.display = 'none'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } showUpdateModal('error'); };
                 const handleAvailable = (info) => { console.log('[Renderer Updater] Доступно обновление:', info); if(modalTitle) modalTitle.textContent = `Доступна версия ${info.version}`; if(modalMessage) modalMessage.textContent = 'Начинается автоматическая загрузка...'; if(progressBar) progressBar.style.width = '0%'; if(progressContainer) progressContainer.style.display = 'block'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } if(errorDetails) errorDetails.style.display = 'none'; showUpdateModal('available'); };
                 const handleProgress = (percent) => { const roundedPercent = Math.round(percent); if (roundedPercent % 5 === 0 || percent > 98 || percent < 2) { console.log('[Renderer Updater] Прогресс:', percent); } if(modalTitle) modalTitle.textContent = 'Загрузка обновления'; if(modalMessage) modalMessage.textContent = `Пожалуйста, подождите... ${roundedPercent}%`; if(progressBar) progressBar.style.width = `${percent}%`; if(progressContainer) progressContainer.style.display = 'block'; if(restartButtonModal) restartButtonModal.style.display = 'none'; if(closeButtonModal) { closeButtonModal.style.display = 'inline-block'; closeButtonModal.disabled = false; } if(errorDetails) errorDetails.style.display = 'none'; showUpdateModal('downloading'); };
                 const handleReady = (info) => { console.log('%c[Renderer Updater] Обновление готово!', 'color: green; font-weight: bold;', info); if(modalTitle) modalTitle.textContent = `Обновление ${info.version} готово!`; if(modalMessage) modalMessage.textContent = 'Нажмите кнопку ниже, чтобы перезапустить приложение и установить обновление.'; if(progressContainer) progressContainer.style.display = 'none'; if(errorDetails) errorDetails.style.display = 'none'; if(restartButtonModal) { restartButtonModal.textContent = 'Перезапустить и установить'; restartButtonModal.disabled = false; restartButtonModal.style.display = 'inline-block'; } if(closeButtonModal) { closeButtonModal.style.display = 'none'; } showUpdateModal('ready'); };
                 updateListeners['update-status'] = window.electronUpdater.on('update-status', handleStatus);
                 updateListeners['update-error'] = window.electronUpdater.on('update-error', handleError);
                 updateListeners['update-available'] = window.electronUpdater.on('update-available', handleAvailable);
                 updateListeners['update-progress'] = window.electronUpdater.on('update-progress', handleProgress);
                 updateListeners['update-ready'] = window.electronUpdater.on('update-ready', handleReady);
            } else { console.warn('[Renderer Updater] API "electronUpdater" не найдено. UI автообновления отключен.'); }

            // --- Сокращение имени и компании в шапке ---
            const userNameElement = document.getElementById('headerUserName');
            const companyElement = document.querySelector('.user-sub-info .user-company span');
            if (userNameElement && userNameElement.textContent) { userNameElement.textContent = shortenFullName(userNameElement.textContent); }
            if (companyElement && companyElement.textContent) { companyElement.textContent = shortenCompanyName(companyElement.textContent); }

        }); // --- Конец DOMContentLoaded ---
    })(); // --- Конец IIFE ---
</script>

<!-- Стили для анимации бейджей и встряски ошибок -->
<style>
    .unread-chats-badge, #unreadCountBadgeHeader {
        transition: transform 0.3s ease, background-color 0.3s ease;
        transform-origin: center;
    }
    .unread-chats-badge.updated, #unreadCountBadgeHeader.updated {
        animation: badge-pulse 0.6s ease-out;
    }
    @keyframes badge-pulse { 0% { transform: scale(1); } 50% { transform: scale(1.25); } 100% { transform: scale(1); } }
    @keyframes shake-error { 0%, 100% { transform: translateX(0); } 10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); } 20%, 40%, 60%, 80% { transform: translateX(5px); } }
    .shake-error { animation: shake-error 0.5s cubic-bezier(.36,.07,.19,.97) both; border-color: var(--danger-color) !important; }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const closeAppButton = document.getElementById('closeAppBtn');
        if (closeAppButton) {
            closeAppButton.addEventListener('click', () => {
                if (window.electronUpdater && typeof window.electronUpdater.send === 'function') {
                    console.log('[Header Script] Attempting to send quit-app signal.');
                    window.electronUpdater.send('quit-app');
                } else {
                    console.error('[Header Script] electronUpdater.send is not available to quit app.');
                }
            });
        }
    });
</script>

</body>
</html>