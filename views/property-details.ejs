<!-- views/property-details.ejs -->

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/property-details.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css"/>
    <script src="https://api-maps.yandex.ru/2.1/?apikey=b6b8d3fa-9cbf-4d16-aed5-fb890a397c59&lang=ru_RU" type="text/javascript"></script>

    <style>
        /* --- Стили остаются БЕЗ ИЗМЕНЕНИЙ, как в вашем последнем коде --- */
        /* ... (все стили из вашего предыдущего блока <style>) ... */
        .details-actions .contact-owner-btn { /* Дополнительный стиль для кнопки чата */
             background-color: #eef2ff; /* Светло-синий фон */
             color: #4f46e5; /* Синий текст */
             border: 1px solid #c7d2fe; /* Синяя рамка */
             flex-grow: 1; /* Растягиваем вместе с другими кнопками */
        }
        .details-actions .contact-owner-btn:hover {
             background-color: #e0e7ff;
             border-color: #a5b4fc;
             color: #4338ca;
        }
        .details-actions .contact-owner-btn:disabled {
             background-color: #eef2ff;
             opacity: 0.7;
        }
        .details-actions .contact-owner-btn .fa-spinner {
            margin-right: 5px;
            display: none;
        }
        .details-actions .contact-owner-btn:disabled .fa-spinner {
            display: inline-block;
        }
         .details-actions .contact-owner-btn:disabled .fa-envelope {
            display: none;
         }
    </style>
</head>
<body>
    <%- include('partials/header') %>
    <%- include('partials/messages') %>

    <main class="container property-details-container">
        <% if (property) { %>
            <h1><%= property.Title || 'Объект недвижимости' %></h1>
            <p class="address">
                <i class="fas fa-map-marker-alt"></i>
                <span><%= property.Address %></span>
            </p>

            <!-- Галерея -->
            <div class="gallery-container">
                <div class="swiper image-gallery"> <div class="swiper-wrapper"> <div class="swiper-slide"><img src="<%= property.DisplayImageSrc %>" alt="Главное фото: <%= property.Title %>"></div> <% if (property.AdditionalImages && property.AdditionalImages.length > 0) { %><% property.AdditionalImages.forEach(imgSrc => { %> <div class="swiper-slide"><img src="<%= imgSrc %>" alt="Дополнительное фото"></div> <% }) %><% } %> </div> <div class="swiper-pagination"></div> </div>
                <% if ((property.AdditionalImages && property.AdditionalImages.length > 0) || property.DisplayImageSrc !== '/images/placeholder.png') { %> <button class="custom-swiper-button custom-swiper-button-prev" aria-label="Previous slide">‹</button> <button class="custom-swiper-button custom-swiper-button-next" aria-label="Next slide">›</button> <% } %>
            </div>

            <!-- Сетка Деталей -->
            <div class="details-grid">
                <!-- === Основная информация === -->
                <section class="main-info">
                    <h2>Основная информация</h2>
                    <div class="info-grid">
                        <span class="info-label">Тип:</span> <span class="info-value"><%= property.Type %></span>
                        <span class="info-label">Площадь:</span> <span class="info-value"><%= property.Area %> м²</span>
                        <span class="info-label">Статус:</span> <span class="info-value"> <span class="status <%= property.IsAvailable ? 'available' : 'unavailable' %>"><%= property.IsAvailable ? 'Доступно' : 'Недоступно' %></span> </span>
                        <span class="info-label">Компания:</span> <span class="info-value"><%= property.CompanyName || property.OwnerUsername || 'Частное лицо' %></span>
                        <span class="info-label">Добавлено:</span> <span class="info-value"><%= property.AddedDate ? new Date(property.AddedDate).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric'}) : 'Неизвестно' %></span>
                        <span class="info-label">Рейтинг:</span> <span class="info-value"> <% if (property.NumberOfReviews && property.NumberOfReviews > 0 && typeof property.Rating === 'number') { %> <strong><%= property.Rating.toFixed(1) %></strong> <span class="star">★</span> (<span id="propertyReviewCount"><%= property.NumberOfReviews %></span> <%= property.NumberOfReviews === 1 ? 'отзыв' : (property.NumberOfReviews % 10 > 1 && property.NumberOfReviews % 10 < 5 && (property.NumberOfReviews < 10 || property.NumberOfReviews > 20) ? 'отзыва' : 'отзывов') %>) <% } else { %> <span id="propertyReviewCountPlaceholder">Нет отзывов</span> <% } %> </span>
                    </div>

                    <div class="price-box">
                         <p class="price-monthly"> <span>Цена за месяц:</span> <span><% if (property.Price && !isNaN(parseFloat(property.Price))) { %><%= new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', maximumFractionDigits: 0 }).format(property.Price) %><% } else { %>Не указана<% } %></span> </p>
                         <p class="price-daily"> <span>Цена за сутки (≈):</span> <span> <% if (property.CalculatedDailyPrice && property.CalculatedDailyPrice > 0) { %> <%= new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', maximumFractionDigits: 0 }).format(property.CalculatedDailyPrice) %> <% } else { %> ? <% } %> </span> </p>
                    </div>

                     <div class="details-actions">
                         <%# Кнопка бронирования %>
                         <% if (canBook) { %>
                             <a href="/bookings/new?propertyId=<%= property.Id %>" class="btn btn-book">Забронировать</a>
                         <% } %>

                         <%# Кнопка "Написать владельцу" - ПЕРЕМЕЩЕНА СЮДА %>
                         <% if (currentUser && currentUser.role === 'Tenant' && property.companyId) { %>
                            <button class="btn btn-outline-primary contact-owner-btn"
                                    data-company-id="<%= property.companyId %>"
                                    data-property-id="<%= property.Id %>">
                                <i class="fas fa-spinner fa-spin"></i> <%# Спиннер для загрузки %>
                                <i class="fas fa-envelope"></i> <%# Иконка письма %>
                                <span>Написать владельцу</span>
                            </button>
                         <% } %>

                         <%# Кнопки админа/владельца %>
                         <% if (canEdit) { %>
                             <a href="/properties/edit/<%= property.Id %>" class="btn btn-edit">Редактировать</a>
                         <% } %>
                         <% if (canDelete) { %>
                             <form action="/properties/delete/<%= property.Id %>" method="POST" style="display: inline-block; margin:0;">
                                <button type="submit" class="btn btn-delete" onclick="return confirm('Удалить объект <%= property.Title %>?')">Удалить</button>
                             </form>
                         <% } %>
                     </div>
                </section>


                <!-- === Боковая информация === -->
                <aside class="side-info">
                    <section class="amenities-details">
                        <h2>Удобства</h2>
                         <ul>
                             <li class="<%= property.HasParking ? 'yes' : 'no' %>"><i class="fas <%= property.HasParking ? 'fa-check-circle' : 'fa-times-circle' %>"></i> Парковка</li>
                             <li class="<%= property.HasWifi ? 'yes' : 'no' %>"><i class="fas <%= property.HasWifi ? 'fa-check-circle' : 'fa-times-circle' %>"></i> Wi-Fi</li>
                             <li class="<%= property.HasBalcony ? 'yes' : 'no' %>"><i class="fas <%= property.HasBalcony ? 'fa-check-circle' : 'fa-times-circle' %>"></i> Балкон</li>
                             <li class="<%= property.IsFurnished ? 'yes' : 'no' %>"><i class="fas <%= property.IsFurnished ? 'fa-check-circle' : 'fa-times-circle' %>"></i> Мебель</li>
                             <li class="<%= property.IsAirConditioned ? 'yes' : 'no' %>"><i class="fas <%= property.IsAirConditioned ? 'fa-check-circle' : 'fa-times-circle' %>"></i> Кондиционер</li>
                              <% if (property.Bedrooms && property.Bedrooms > 0) { %> <li class="yes"><i class="fas fa-bed"></i><%= property.Bedrooms %> <%= property.Bedrooms === 1 ? 'спальня' : (property.Bedrooms < 5 ? 'спальни' : 'спален') %></li> <% } %>
                              <% if (property.Bathrooms && property.Bathrooms > 0) { %> <li class="yes"><i class="fas fa-bath"></i><%= property.Bathrooms %> <%= property.Bathrooms === 1 ? 'ванная' : (property.Bathrooms < 5 ? 'ванные' : 'ванных') %> комната</li> <% } %>
                        </ul>
                    </section>

                    <section class="description-details">
                        <h2>Описание</h2>
                        <p><%= property.Description || 'Описание отсутствует.' %></p>
                    </section>
                </aside>
            </div>

             <!-- === Секция Карты === -->
             <section class="map-section">
                <h2>Местоположение на карте</h2>
                <div id="propertyMap"
                      style="width: 100%; height: 400px; background-color: #f0f0f0;"
                      data-address="<%= property && property.Address ? property.Address : '' %>"
                      data-title-hint="<%= property && property.Title ? property.Title : '' %>">
                    <%# Карта будет вставлена сюда через JavaScript %>
                 </div>
             </section>
             <!-- === Конец Секции Карты === -->

            <!-- Секция Отзывов -->
            <section class="reviews-section">
                <h2>Отзывы (<span id="reviewCountDisplay"><%= locals.reviews && locals.reviews.length ? locals.reviews.length : 0 %></span>)</h2>
                <div id="js-review-messages"></div>
                <div id="reviewsListContainer"> <% if (locals.reviews && locals.reviews.length > 0) { %><% reviews.forEach(review => { %> <div class="review-item" id="review-<%= review.reviewId %>"> <div class="review-header"> <span class="review-author"><%= review.FullName || review.username || 'Аноним' %></span> <div class="review-header-right"> <span class="review-date"><%= review.createdAt ? new Date(review.createdAt).toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric'}) : '' %></span> <% if (currentUser && currentUser.role === 'Admin') { %> <button class="review-delete-btn" title="Удалить отзыв" data-review-id="<%= review.reviewId %>" data-property-id="<%= property.Id %>" onclick="deleteReview(this)">×</button> <% } %> </div> </div> <div class="review-rating"> <% for (let i = 1; i <= 5; i++) { %><span class="star <%= i <= review.rating ? '' : 'star-empty' %>">★</span><% } %> </div> <p class="review-comment"><%= review.comment %></p> </div> <% }) %><% } else { %> <p id="noReviewsMessage" style="text-align: center; color: #64748b; margin-top: 15px;">Отзывов пока нет.</p> <% } %> </div>
            </section>


            <!-- Секция Добавить Отзыв -->
            <% if (locals.canReview) { %> <section class="add-review-section"> <h3>Оставить отзыв</h3> <form id="addReviewForm" class="add-review-form" action="/properties/<%= property.Id %>/reviews" method="POST"> <div class="form-group"> <label>Ваша оценка:</label> <div class="star-rating-input"> <input type="radio" id="star5" name="rating" value="5" required/><label for="star5" title="Отлично">★</label> <input type="radio" id="star4" name="rating" value="4" /><label for="star4" title="Хорошо">★</label> <input type="radio" id="star3" name="rating" value="3" /><label for="star3" title="Нормально">★</label> <input type="radio" id="star2" name="rating" value="2" /><label for="star2" title="Плохо">★</label> <input type="radio" id="star1" name="rating" value="1" /><label for="star1" title="Ужасно">★</label> </div> </div> <div class="form-group"> <label for="comment">Ваш комментарий (макс. 1000 симв.):</label> <textarea id="comment" name="comment" rows="4" required maxlength="1000" placeholder="Поделитесь вашим мнением..."></textarea> </div> <button id="submitReviewBtn" type="submit" class="btn btn-primary">Отправить отзыв</button> </form> </section> <% } else if (locals.userHasReviewed) { %> <p class="already-reviewed-message">Вы уже оставили отзыв для этого объекта.</p> <% } %>

        <% } else { %>
            <h1>Объект не найден</h1> <p>К сожалению, объект с таким идентификатором не найден.</p> <a href="/properties" class="btn btn-secondary">Вернуться к списку</a>
        <% } %>
    </main>
    <div id="newMessageModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeNewMessageModal()">×</span>
            <h2>Написать сообщение владельцу</h2>
            <p>Объект: <strong id="newMessageModalPropertyName"></strong></p>
            <form id="newMessageForm">
                <input type="hidden" id="newMessageCompanyId">
                <input type="hidden" id="newMessagePropertyId">
                <div class="form-group">
                    <label for="initialMessageTextarea">Ваше сообщение *</label>
                    <textarea id="initialMessageTextarea" class="form-control" rows="5" required maxlength="2000" placeholder="Введите ваш вопрос или сообщение..."></textarea>
                    <p id="newMessageModalError" style="color: var(--danger-color); display: none; font-size: 0.9rem; margin-top: 5px;"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeNewMessageModal()">Отмена</button>
                    <button type="submit" id="sendInitialMessageBtn" class="btn btn-primary">
                        <span class="button-text">Отправить</span>
                        <i class="fas fa-spinner fa-spin button-spinner"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <%- include('partials/footer') %>
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<%# Подключаем chat.js ПЕРЕД скриптом этой страницы, если обработчик кнопки чата вынесен туда %>
<%# Если обработчик кнопки остается здесь, chat.js можно убрать отсюда %>
<%# <script src="/js/chat.js"></script> %>
<script>
    // --- Swiper Init ---
    const swiper = new Swiper('.image-gallery', {
        loop: true,
        pagination: { el: '.swiper-pagination', clickable: true, },
        navigation: { nextEl: '.custom-swiper-button-next', prevEl: '.custom-swiper-button-prev', },
        grabCursor: true,
    });

    // --- Disable Review Submit Button ---
    const reviewForm = document.getElementById('addReviewForm');
    const reviewSubmitBtn = document.getElementById('submitReviewBtn');
    if (reviewForm && reviewSubmitBtn) {
        reviewForm.addEventListener('submit', () => {
            const ratingSelected = reviewForm.querySelector('input[name="rating"]:checked');
            const commentContent = reviewForm.querySelector('textarea[name="comment"]').value.trim();
            if (ratingSelected && commentContent) {
                reviewSubmitBtn.disabled = true;
                reviewSubmitBtn.textContent = 'Отправка...';
            } else {
                console.log("Review form validation failed client-side.");
            }
        });
    }

    // --- JS Review Messages ---
    function showReviewJsMessage(type, text) {
        const container = document.getElementById('js-review-messages');
        if (!container) return;
        const messageDiv = document.createElement('div');
        messageDiv.className = `flash-message flash-${type}`;
        messageDiv.innerHTML = `${text} <button type="button" class="close-flash" onclick="this.parentElement.remove()">×</button>`;
        container.innerHTML = '';
        container.appendChild(messageDiv);
        setTimeout(() => { if (messageDiv && messageDiv.parentNode) messageDiv.remove(); }, 5000);
    }

    // --- Delete Review ---
    async function deleteReview(buttonElement) {
        const reviewId = buttonElement.dataset.reviewId;
        const propertyId = buttonElement.dataset.propertyId;
        if (!reviewId || !propertyId) { console.error("Missing review/property ID."); showReviewJsMessage('error', 'Ошибка: Не удалось определить отзыв.'); return; }
        if (!confirm(`Удалить отзыв (${reviewId.substring(0, 6)}...)?`)) { return; }
        buttonElement.disabled = true;
        const originalButtonContent = buttonElement.innerHTML;
        buttonElement.innerHTML = '...';
        try {
            const response = await fetch(`/properties/${propertyId}/reviews/${reviewId}/delete`, { method: 'POST', headers: { 'Accept': 'application/json' } });
            const result = await response.json();
            if (response.ok && result.success) {
                document.getElementById(`review-${reviewId}`)?.remove();
                const countElement = document.getElementById('reviewCountDisplay');
                const noReviewsMsg = document.getElementById('noReviewsMessage');
                const reviewListContainer = document.getElementById('reviewsListContainer');
                const propertyRatingContainer = document.querySelector('.main-info .info-grid .info-value:has(strong.star)'); // Обновляем селектор для поиска родителя

                if (countElement && typeof result.newReviewCount !== 'undefined') {
                    countElement.textContent = result.newReviewCount;
                    const hasReviewsLeft = reviewListContainer && reviewListContainer.querySelector('.review-item');
                    if (noReviewsMsg) noReviewsMsg.style.display = hasReviewsLeft ? 'none' : 'block';

                    // Обновляем отображение рейтинга объекта
                    if (propertyRatingContainer) {
                        if (result.newReviewCount > 0 && typeof result.newRating === 'number') {
                            const count = result.newReviewCount;
                            const word = count === 1 ? 'отзыв' : (count % 10 > 1 && count % 10 < 5 && (count < 10 || count > 20) ? 'отзыва' : 'отзывов');
                             // Генерируем звезды
                             let starsHTML = '';
                             for(let i = 1; i <= 5; i++) { starsHTML += `<span class="star ${ i <= result.newRating ? '' : 'star-empty'}">★</span>`; }
                             // Обновляем весь блок
                            propertyRatingContainer.innerHTML = `<strong>${result.newRating.toFixed(1)}</strong> ${starsHTML} (<span id="propertyReviewCount">${result.newReviewCount}</span> ${word})`;
                        } else {
                            propertyRatingContainer.innerHTML = '<span id="propertyReviewCountPlaceholder">Нет отзывов</span>';
                        }
                    }
                }
                showReviewJsMessage('success', result.message || 'Отзыв удален.');
            } else { throw new Error(result.error || 'Не удалось удалить отзыв.'); }
        } catch (error) {
            console.error(`Error deleting review ${reviewId}:`, error);
            showReviewJsMessage('error', error.message || 'Произошла ошибка при удалении.');
            buttonElement.disabled = false;
            buttonElement.innerHTML = originalButtonContent;
        }
    }

    // --- Yandex Map Init ---
    document.addEventListener('DOMContentLoaded', () => {
        if (typeof ymaps !== 'undefined') {
            ymaps.ready(initMap);
        } else {
            console.error("Yandex Maps API не загружен.");
            const mapContainer = document.getElementById('propertyMap');
            if (mapContainer) mapContainer.innerHTML = '<div class="map-error-message">Ошибка загрузки API Яндекс.Карт.</div>';
        }
        // Инициализация обработчиков для модального окна чата
        initializeChatModalHandlers();
    });

    function initMap() {
        const mapContainer = document.getElementById('propertyMap');
        if (!mapContainer) { console.error('Map container #propertyMap not found!'); return; }
        let propertyAddress = mapContainer.dataset.address;
        let propertyTitleHint = mapContainer.dataset.titleHint;

        if (!propertyAddress || String(propertyAddress).trim() === '') {
            mapContainer.innerHTML = '<div class="map-error-message">Адрес объекта не указан или некорректен для отображения на карте.</div>';
            console.warn("Адрес для карты не был получен или был некорректен. Data-address был: ", mapContainer.dataset.address);
            return; 
        }
        ymaps.geocode(propertyAddress, { results: 1 })
            .then(function (res) {
                const firstGeoObject = res.geoObjects.get(0);
                if (!firstGeoObject) { mapContainer.innerHTML = '<div class="map-error-message">Не найдены координаты: ' + propertyAddress + '</div>'; return; }
                const coords = firstGeoObject.geometry.getCoordinates();
                const initialZoom = 15;
                const propertyMap = new ymaps.Map('propertyMap', { center: coords, zoom: initialZoom, controls: ['zoomControl', 'fullscreenControl', 'typeSelector'] });
                propertyMap.setCenter(coords, initialZoom);
                
                // Принудительно обновляем размер карты после создания и небольшой задержки
                setTimeout(() => {
                    if (propertyMap && propertyMap.container) {
                        propertyMap.container.fitToViewport();
                    }
                }, 100); // Задержка 100 мс

                const placemark = new ymaps.Placemark(coords, { hintContent: propertyTitleHint || propertyAddress, balloonContent: `<strong>${propertyTitleHint || 'Объект'}</strong><br>${propertyAddress}` }, { preset: 'islands#blueDotIconWithCaption' });
                propertyMap.geoObjects.add(placemark);
            })
            .catch(function (err) { mapContainer.innerHTML = '<div class="map-error-message">Ошибка геокодирования.</div>'; console.error('Geocoding error:', err); });
    }

    // --- Chat Modal Logic ---
    const newMessageModal = document.getElementById('newMessageModal');
    const newMessageForm = document.getElementById('newMessageForm');
    const initialMessageTextarea = document.getElementById('initialMessageTextarea');
    const sendInitialMessageBtn = document.getElementById('sendInitialMessageBtn');
    const newMessageCompanyIdInput = document.getElementById('newMessageCompanyId');
    const newMessagePropertyIdInput = document.getElementById('newMessagePropertyId');
    const newMessageModalError = document.getElementById('newMessageModalError');
    const newMessageModalPropertyName = document.getElementById('newMessageModalPropertyName');

    function openNewMessageModal(companyId, propertyId, propertyName) {
        if (!newMessageModal || !newMessageCompanyIdInput || !newMessagePropertyIdInput || !initialMessageTextarea || !newMessageModalPropertyName) return;
        newMessageCompanyIdInput.value = companyId;
        newMessagePropertyIdInput.value = propertyId;
        initialMessageTextarea.value = ''; // Очищаем поле
        newMessageModalPropertyName.textContent = propertyName || 'Неизвестный объект'; // Показываем название
        newMessageModalError.style.display = 'none'; // Скрываем старые ошибки
        sendInitialMessageBtn.disabled = false; // Разблокируем кнопку
        sendInitialMessageBtn.querySelector('.button-text').textContent = 'Отправить'; // Восстанавливаем текст кнопки

        newMessageModal.style.display = 'block';
        setTimeout(() => { newMessageModal.classList.add('visible'); document.body.style.overflow = 'hidden'; }, 10);
        initialMessageTextarea.focus();
    }

    function closeNewMessageModal() {
        if (!newMessageModal) return;
        newMessageModal.classList.remove('visible');
        setTimeout(() => { newMessageModal.style.display = 'none'; document.body.style.overflow = ''; }, 300);
    }

    // Функция для показа ошибки ВНУТРИ модального окна
    function showModalError(message) {
        if (newMessageModalError) {
            newMessageModalError.textContent = message;
            newMessageModalError.style.display = 'block';
            // Добавляем встряску к textarea
            if(initialMessageTextarea) {
                initialMessageTextarea.classList.add('shake-error');
                setTimeout(() => initialMessageTextarea.classList.remove('shake-error'), 500);
            }
        }
    }

    // Привязка обработчиков к модальному окну
    function initializeChatModalHandlers() {
        // Кнопка "Написать владельцу"
        document.querySelectorAll('.contact-owner-btn').forEach(button => {
             const buttonIcon = button.querySelector('.fa-envelope');
             const buttonSpinner = button.querySelector('.fa-spinner');
             const buttonTextSpan = button.querySelector('span');

             if (buttonSpinner) buttonSpinner.style.display = 'none'; // Скрыть спиннер изначально

             button.addEventListener('click', () => {
                 const companyId = button.dataset.companyId;
                 const propertyId = button.dataset.propertyId;
                 const propertyName = document.querySelector('h1')?.textContent || 'этот объект'; // Берем название из h1

                 if (!companyId || !propertyId) {
                     alert("Ошибка: не удалось определить получателя или объект.");
                     return;
                 }
                 openNewMessageModal(companyId, propertyId, propertyName);
             });
        });

        // Форма отправки первого сообщения
        if (newMessageForm) {
            newMessageForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                const companyId = newMessageCompanyIdInput.value;
                const propertyId = newMessagePropertyIdInput.value;
                const initialMessage = initialMessageTextarea.value.trim();

                if (!companyId || !propertyId || !initialMessage) {
                     showModalError('Пожалуйста, введите сообщение.');
                    return;
                }
                 if (initialMessage.length > 2000) {
                    showModalError('Сообщение слишком длинное (макс. 2000 символов).');
                    return;
                 }

                sendInitialMessageBtn.disabled = true;
                sendInitialMessageBtn.querySelector('.button-text').textContent = 'Отправка...';
                const spinner = sendInitialMessageBtn.querySelector('.button-spinner');
                if (spinner) spinner.style.display = 'inline-block';
                newMessageModalError.style.display = 'none'; // Скрываем ошибку перед отправкой

                try {
                    const response = await fetch('/chats', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify({
                            recipientCompanyId: companyId,
                            propertyId: propertyId,
                            initialMessage: initialMessage
                        })
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) {
                        throw new Error(result.error || 'Не удалось создать чат.');
                    }
                    // Успешно - закрываем модалку и переходим в чат
                    closeNewMessageModal();
                    window.location.href = `/chats/${result.chatId}`;

                } catch (error) {
                    console.error("Error initiating chat via modal:", error);
                    showModalError(error.message || 'Произошла ошибка.');
                    sendInitialMessageBtn.disabled = false;
                    sendInitialMessageBtn.querySelector('.button-text').textContent = 'Отправить';
                     if (spinner) spinner.style.display = 'none';
                }
            });
        }

         // Закрытие модального окна
         document.querySelectorAll('#newMessageModal .close-modal, #newMessageModal .btn-secondary').forEach(el => {
             el.addEventListener('click', closeNewMessageModal);
         });
         if (newMessageModal) {
             newMessageModal.addEventListener('click', (event) => {
                 if (event.target === newMessageModal) { closeNewMessageModal(); }
             });
         }
         document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && newMessageModal && newMessageModal.classList.contains('visible')) {
                closeNewMessageModal();
            }
        });

    } // Конец initializeChatModalHandlers

</script>

</body>
</html>